/*! wembli-website 2014-06-21 */
"use strict";

!function(root, define, factory) {
    "function" == typeof define && define.amd ? define(function(req) {
        var id = "moment", moment = req.defined && req.defined(id) ? req(id) : void 0;
        return factory(moment || root.moment);
    }) : root.Pikaday = factory(root.moment);
}(window, window.define, function(moment) {
    var hasMoment = "function" == typeof moment, hasEventListeners = !!window.addEventListener, document = window.document, sto = window.setTimeout, addEvent = function(el, e, callback, capture) {
        hasEventListeners ? el.addEventListener(e, callback, !!capture) : el.attachEvent("on" + e, callback);
    }, removeEvent = function(el, e, callback, capture) {
        hasEventListeners ? el.removeEventListener(e, callback, !!capture) : el.detachEvent("on" + e, callback);
    }, fireEvent = function(el, eventName, data) {
        var ev;
        document.createEvent ? (ev = document.createEvent("HTMLEvents"), ev.initEvent(eventName, !0, !1), 
        ev = extend(ev, data), el.dispatchEvent(ev)) : document.createEventObject && (ev = document.createEventObject(), 
        ev = extend(ev, data), el.fireEvent("on" + eventName, ev));
    }, trim = function(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }, hasClass = function(el, cn) {
        return -1 !== (" " + el.className + " ").indexOf(" " + cn + " ");
    }, addClass = function(el, cn) {
        hasClass(el, cn) || (el.className = "" === el.className ? cn : el.className + " " + cn);
    }, removeClass = function(el, cn) {
        el.className = trim((" " + el.className + " ").replace(" " + cn + " ", " "));
    }, isArray = function(obj) {
        return /Array/.test(Object.prototype.toString.call(obj));
    }, isDate = function(obj) {
        return /Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    }, isLeapYear = function(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }, getDaysInMonth = function(year, month) {
        return [ 31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ][month];
    }, setToStartOfDay = function(date) {
        isDate(date) && date.setHours(0, 0, 0, 0);
    }, compareDates = function(a, b) {
        return a.getTime() === b.getTime();
    }, extend = function(to, from, overwrite) {
        var prop, hasProp;
        for (prop in from) hasProp = void 0 !== to[prop], hasProp && "object" == typeof from[prop] && void 0 === from[prop].nodeName ? isDate(from[prop]) ? overwrite && (to[prop] = new Date(from[prop].getTime())) : isArray(from[prop]) ? overwrite && (to[prop] = from[prop].slice(0)) : to[prop] = extend({}, from[prop], overwrite) : (overwrite || !hasProp) && (to[prop] = from[prop]);
        return to;
    }, defaults = {
        field: null,
        bound: void 0,
        format: "YYYY-MM-DD",
        defaultDate: null,
        setDefaultDate: !1,
        firstDay: 0,
        minDate: null,
        maxDate: null,
        yearRange: 10,
        minYear: 0,
        maxYear: 9999,
        minMonth: void 0,
        maxMonth: void 0,
        isRTL: !1,
        numberOfMonths: 1,
        i18n: {
            previousMonth: "Previous Month",
            nextMonth: "Next Month",
            months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            weekdays: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            weekdaysShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
        },
        onSelect: null,
        onOpen: null,
        onClose: null,
        onDraw: null
    }, renderDayName = function(opts, day, abbr) {
        for (day += opts.firstDay; day >= 7; ) day -= 7;
        return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
    }, renderDay = function(i, isSelected, isToday, isDisabled, isEmpty) {
        if (isEmpty) return '<td class="is-empty"></td>';
        var arr = [];
        return isDisabled && arr.push("is-disabled"), isToday && arr.push("is-today"), isSelected && arr.push("is-selected"), 
        '<td data-day="' + i + '" class="' + arr.join(" ") + '"><button class="pika-button" type="button">' + i + "</button></td>";
    }, renderRow = function(days, isRTL) {
        return "<tr>" + (isRTL ? days.reverse() : days).join("") + "</tr>";
    }, renderBody = function(rows) {
        return "<tbody>" + rows.join("") + "</tbody>";
    }, renderHead = function(opts) {
        var i, arr = [];
        for (i = 0; 7 > i; i++) arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, !0) + "</abbr></th>");
        return "<thead>" + (opts.isRTL ? arr.reverse() : arr).join("") + "</thead>";
    }, renderTitle = function(instance) {
        var i, j, arr, opts = instance._o, month = instance._m, year = instance._y, isMinYear = year === opts.minYear, isMaxYear = year === opts.maxYear, html = '<div class="pika-title">', prev = !0, next = !0;
        for (arr = [], i = 0; 12 > i; i++) arr.push('<option value="' + i + '"' + (i === month ? " selected" : "") + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? "disabled" : "") + ">" + opts.i18n.months[i] + "</option>");
        for (html += '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month">' + arr.join("") + "</select></div>", 
        isArray(opts.yearRange) ? (i = opts.yearRange[0], j = opts.yearRange[1] + 1) : (i = year - opts.yearRange, 
        j = 1 + year + opts.yearRange), arr = []; j > i && i <= opts.maxYear; i++) i >= opts.minYear && arr.push('<option value="' + i + '"' + (i === year ? " selected" : "") + ">" + i + "</option>");
        return html += '<div class="pika-label">' + year + '<select class="pika-select pika-select-year">' + arr.join("") + "</select></div>", 
        isMinYear && (0 === month || opts.minMonth >= month) && (prev = !1), isMaxYear && (11 === month || opts.maxMonth <= month) && (next = !1), 
        html += '<button class="pika-prev' + (prev ? "" : " is-disabled") + '" type="button">' + opts.i18n.previousMonth + "</button>", 
        html += '<button class="pika-next' + (next ? "" : " is-disabled") + '" type="button">' + opts.i18n.nextMonth + "</button>", 
        html += "</div>";
    }, renderTable = function(opts, data) {
        return '<table cellpadding="0" cellspacing="0" class="pika-table">' + renderHead(opts) + renderBody(data) + "</table>";
    }, Pikaday = function(options) {
        var self = this, opts = self.config(options);
        self._onMouseDown = function(e) {
            if (self._v) {
                e = e || window.event;
                var target = e.target || e.srcElement;
                if (target) {
                    if (!hasClass(target, "is-disabled")) {
                        if (hasClass(target, "pika-button") && !hasClass(target, "is-empty")) return self.setDate(new Date(self._y, self._m, parseInt(target.innerHTML, 10))), 
                        void (opts.bound && sto(function() {
                            self.hide();
                        }, 100));
                        hasClass(target, "pika-prev") ? self.prevMonth() : hasClass(target, "pika-next") && self.nextMonth();
                    }
                    if (hasClass(target, "pika-select")) self._c = !0; else {
                        if (!e.preventDefault) return e.returnValue = !1, !1;
                        e.preventDefault();
                    }
                }
            }
        }, self._onChange = function(e) {
            e = e || window.event;
            var target = e.target || e.srcElement;
            target && (hasClass(target, "pika-select-month") ? self.gotoMonth(target.value) : hasClass(target, "pika-select-year") && self.gotoYear(target.value));
        }, self._onInputChange = function(e) {
            var date;
            e.firedBy !== self && (hasMoment ? (date = moment(opts.field.value, opts.format), 
            date = date && date.isValid() ? date.toDate() : null) : date = new Date(Date.parse(opts.field.value)), 
            self.setDate(isDate(date) ? date : null), self._v || self.show());
        }, self._onInputFocus = function() {
            self.show();
        }, self._onInputClick = function() {
            self.show();
        }, self._onInputBlur = function() {
            self._c || (self._b = sto(function() {
                self.hide();
            }, 50)), self._c = !1;
        }, self._onClick = function(e) {
            e = e || window.event;
            var target = e.target || e.srcElement, pEl = target;
            if (target) {
                !hasEventListeners && hasClass(target, "pika-select") && (target.onchange || (target.setAttribute("onchange", "return;"), 
                addEvent(target, "change", self._onChange)));
                do if (hasClass(pEl, "pika-single")) return; while (pEl = pEl.parentNode);
                self._v && target !== opts.field && self.hide();
            }
        }, self.el = document.createElement("div"), self.el.className = "pika-single" + (opts.isRTL ? " is-rtl" : ""), 
        addEvent(self.el, "mousedown", self._onMouseDown, !0), addEvent(self.el, "change", self._onChange), 
        opts.field && (opts.bound ? document.body.appendChild(self.el) : opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling), 
        addEvent(opts.field, "change", self._onInputChange), opts.defaultDate || (opts.defaultDate = hasMoment && opts.field.value ? moment(opts.field.value, opts.format).toDate() : new Date(Date.parse(opts.field.value)), 
        opts.setDefaultDate = !0));
        var defDate = opts.defaultDate;
        isDate(defDate) ? opts.setDefaultDate ? self.setDate(defDate, !0) : self.gotoDate(defDate) : self.gotoDate(new Date()), 
        opts.bound ? (this.hide(), self.el.className += " is-bound", addEvent(opts.field, "click", self._onInputClick), 
        addEvent(opts.field, "focus", self._onInputFocus), addEvent(opts.field, "blur", self._onInputBlur)) : this.show();
    };
    return Pikaday.prototype = {
        config: function(options) {
            this._o || (this._o = extend({}, defaults, !0));
            var opts = extend(this._o, options, !0);
            opts.isRTL = !!opts.isRTL, opts.field = opts.field && opts.field.nodeName ? opts.field : null, 
            opts.bound = !!(void 0 !== opts.bound ? opts.field && opts.bound : opts.field);
            var nom = parseInt(opts.numberOfMonths, 10) || 1;
            if (opts.numberOfMonths = nom > 4 ? 4 : nom, isDate(opts.minDate) || (opts.minDate = !1), 
            isDate(opts.maxDate) || (opts.maxDate = !1), opts.minDate && opts.maxDate && opts.maxDate < opts.minDate && (opts.maxDate = opts.minDate = !1), 
            opts.minDate && (setToStartOfDay(opts.minDate), opts.minYear = opts.minDate.getFullYear(), 
            opts.minMonth = opts.minDate.getMonth()), opts.maxDate && (setToStartOfDay(opts.maxDate), 
            opts.maxYear = opts.maxDate.getFullYear(), opts.maxMonth = opts.maxDate.getMonth()), 
            isArray(opts.yearRange)) {
                var fallback = new Date().getFullYear() - 10;
                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback, opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
            } else opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange, 
            opts.yearRange > 100 && (opts.yearRange = 100);
            return opts;
        },
        toString: function(format) {
            return isDate(this._d) ? hasMoment ? moment(this._d).format(format || this._o.format) : this._d.toDateString() : "";
        },
        getMoment: function() {
            return hasMoment ? moment(this._d) : null;
        },
        setMoment: function(date) {
            hasMoment && moment.isMoment(date) && this.setDate(date.toDate());
        },
        getDate: function() {
            return isDate(this._d) ? new Date(this._d.getTime()) : null;
        },
        setDate: function(date, preventOnSelect) {
            if (!date) return this._d = null, this.draw();
            if ("string" == typeof date && (date = new Date(Date.parse(date))), isDate(date)) {
                var min = this._o.minDate, max = this._o.maxDate;
                isDate(min) && min > date ? date = min : isDate(max) && date > max && (date = max), 
                this._d = new Date(date.getTime()), setToStartOfDay(this._d), this.gotoDate(this._d), 
                this._o.field && (this._o.field.value = this.toString(), fireEvent(this._o.field, "change", {
                    firedBy: this
                })), preventOnSelect || "function" != typeof this._o.onSelect || this._o.onSelect.call(this, this.getDate());
            }
        },
        gotoDate: function(date) {
            isDate(date) && (this._y = date.getFullYear(), this._m = date.getMonth(), this.draw());
        },
        gotoToday: function() {
            this.gotoDate(new Date());
        },
        gotoMonth: function(month) {
            isNaN(month = parseInt(month, 10)) || (this._m = 0 > month ? 0 : month > 11 ? 11 : month, 
            this.draw());
        },
        nextMonth: function() {
            ++this._m > 11 && (this._m = 0, this._y++), this.draw();
        },
        prevMonth: function() {
            --this._m < 0 && (this._m = 11, this._y--), this.draw();
        },
        gotoYear: function(year) {
            isNaN(year) || (this._y = parseInt(year, 10), this.draw());
        },
        draw: function(force) {
            if (this._v || force) {
                var opts = this._o, minYear = opts.minYear, maxYear = opts.maxYear, minMonth = opts.minMonth, maxMonth = opts.maxMonth;
                if (this._y <= minYear && (this._y = minYear, !isNaN(minMonth) && this._m < minMonth && (this._m = minMonth)), 
                this._y >= maxYear && (this._y = maxYear, !isNaN(maxMonth) && this._m > maxMonth && (this._m = maxMonth)), 
                this.el.innerHTML = renderTitle(this) + this.render(this._y, this._m), opts.bound) {
                    for (var pEl = opts.field, left = pEl.offsetLeft, top = pEl.offsetTop + pEl.offsetHeight; pEl = pEl.offsetParent; ) left += pEl.offsetLeft, 
                    top += pEl.offsetTop;
                    this.el.style.cssText = "position:absolute;left:" + left + "px;top:" + top + "px;", 
                    sto(function() {
                        opts.field.focus();
                    }, 1);
                }
                if ("function" == typeof this._o.onDraw) {
                    var self = this;
                    sto(function() {
                        self._o.onDraw.call(self);
                    }, 0);
                }
            }
        },
        render: function(year, month) {
            var opts = this._o, now = new Date(), days = getDaysInMonth(year, month), before = new Date(year, month, 1).getDay(), data = [], row = [];
            setToStartOfDay(now), opts.firstDay > 0 && (before -= opts.firstDay, 0 > before && (before += 7));
            for (var cells = days + before, after = cells; after > 7; ) after -= 7;
            cells += 7 - after;
            for (var i = 0, r = 0; cells > i; i++) {
                var day = new Date(year, month, 1 + (i - before)), isDisabled = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate, isSelected = isDate(this._d) ? compareDates(day, this._d) : !1, isToday = compareDates(day, now), isEmpty = before > i || i >= days + before;
                row.push(renderDay(1 + (i - before), isSelected, isToday, isDisabled, isEmpty)), 
                7 === ++r && (data.push(renderRow(row, opts.isRTL)), row = [], r = 0);
            }
            return renderTable(opts, data);
        },
        isVisible: function() {
            return this._v;
        },
        show: function() {
            this._v || (this._o.bound && addEvent(document, "click", this._onClick), removeClass(this.el, "is-hidden"), 
            this._v = !0, this.draw(), "function" == typeof this._o.onOpen && this._o.onOpen.call(this));
        },
        hide: function() {
            var v = this._v;
            v !== !1 && (this._o.bound && removeEvent(document, "click", this._onClick), this.el.style.cssText = "", 
            addClass(this.el, "is-hidden"), this._v = !1, void 0 !== v && "function" == typeof this._o.onClose && this._o.onClose.call(this));
        },
        destroy: function() {
            this.hide(), removeEvent(this.el, "mousedown", this._onMouseDown, !0), removeEvent(this.el, "change", this._onChange), 
            this._o.field && (removeEvent(this._o.field, "change", this._onInputChange), this._o.bound && (removeEvent(this._o.field, "click", this._onInputClick), 
            removeEvent(this._o.field, "focus", this._onInputFocus), removeEvent(this._o.field, "blur", this._onInputBlur))), 
            this.el.parentNode && this.el.parentNode.removeChild(this.el);
        }
    }, Pikaday;
}), function(root, define, factory) {
    "function" == typeof define && define.amd ? define([ "jquery", "pikaday" ], factory) : factory(root.jQuery, root.Pikaday);
}(window, window.define, function($, Pikaday) {
    $.fn.pikaday = function() {
        var args = arguments;
        return args && args.length || (args = [ {} ]), this.each(function() {
            var self = $(this), plugin = self.data("pikaday");
            if (plugin instanceof Pikaday) "string" == typeof args[0] && "function" == typeof plugin[args[0]] && plugin[args[0]].apply(plugin, Array.prototype.slice.call(args, 1)); else if ("object" == typeof args[0]) {
                var options = $.extend({}, args[0]);
                options.field = self[0], self.data("pikaday", new Pikaday(options));
            }
        });
    };
}), angular.module("wembliApp", [ "ngRoute", "mgcrea.ngStrap", "wembliApp.controllers", "wembliApp.controllers.invitation", "wembliApp.controllers.header", "wembliApp.filters", "wembliApp.services", "wembliApp.services.header", "wembliApp.services.facebook", "wembliApp.services.twitter", "wembliApp.services.pixel", "wembliApp.directives", "wembliApp.directives.header", "wembliApp.directives.invitationWizard" ]).config([ "$routeProvider", "$locationProvider", function() {} ]).run([ "$timeout", "initRootScope", "$rootScope", "$location", "$route", "$window", "facebook", "twitter", "plan", "wembliRpc", function($timeout, initRootScope, $scope, $location, $route, $window, facebook, twitter, plan) {
    console.log("run invitation angular app"), $timeout(function() {
        plan.fetch(function() {});
    }), $window.fbAsyncInit = function() {
        facebook.getLoginStatus(), $scope.facebook = facebook;
    }, twitter.getLoginStatus();
} ]), angular.module("wembliApp.controllers.invitation", []).controller("InvitationCtrl", [ "$scope", "wembliRpc", "$window", "plan", function() {} ]), 
angular.module("wembliApp.directives.invitationWizard", []).directive("inviteFriendsWizard", [ "$rootScope", "$http", "$filter", "$window", "$timeout", "plan", "$location", "wembliRpc", "customer", "facebook", "twitter", "loggedIn", function($rootScope, $http, $filter, $window, $timeout, plan, $location, wembliRpc, customer, facebook, twitter, loggedIn) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.stepCompleted = {
                "nav-step1": !1,
                "nav-step2": !1,
                "nav-step3": !1,
                "nav-step4": !1,
                "nav-step5": !1
            }, $scope.navData = {
                "nav-step1": null,
                "nav-step2": null,
                "nav-step3": null,
                "nav-step4": null,
                "nav-step5": null
            }, $scope.$watch("showStep", function(e, val) {
                val && $scope.stepCompleted["nav-" + val];
            }), $scope.$on("$locationChangeSuccess", function() {
                /^\/invitation/.test($location.path()) && ($scope.showStep = $location.hash() || "step1", 
                $scope.currentStep = "nav-" + $scope.showStep);
            }), $scope.$watch("customer", function() {
                $scope.loggedIn = loggedIn.check();
            }), $scope.planFriends = [], $scope.selectedFriends = {
                step3: {},
                step4: {},
                step5: {}
            }, $scope.getEventDate = function() {
                return plan.get() ? plan.get().event.eventDate : void 0;
            }, $scope.gotoStep = function(step) {
                console.log("goto step: " + step), $scope.currentStep = "nav-" + step, $scope.showStep = step;
            }, $scope.skipStep = function(step, completed) {
                "undefined" != typeof completed && ($scope.stepCompleted["nav-" + completed] = !0);
                var nextStep = "step" + (parseInt(step.charAt(step.length - 1)) + 1);
                $scope.gotoStep(nextStep);
            }, $scope.rsvpUninvited = function(friend) {
                return "undefined" == typeof friend.rsvp ? !0 : !1;
            }, $scope.rsvpInvited = function(friend) {
                return "undefined" == typeof friend.rsvp ? !1 : !0;
            }, $scope.rsvpDeclined = function(friend) {
                return "undefined" == typeof friend.rsvp ? !1 : friend.rsvp.decision === !1 ? !0 : !1;
            }, $scope.rsvpAccepted = function(friend) {
                return "undefined" == typeof friend.rsvp ? !1 : friend.rsvp.decision === !0 ? !0 : !1;
            }, $scope.rsvpUndecided = function(friend) {
                return "undefined" == typeof friend.rsvp ? !1 : null === friend.rsvp.decision ? !0 : !1;
            }, $scope.finished = function() {
                return $scope.customer.email ? void ($window.location.href = "/plan#section1") : ($scope.signup.noContinue = !0, 
                $scope.gotoStep("step1"));
            }, plan.get(function(p) {
                if ($scope.plan = p, $scope.loggedIn = loggedIn.check(), !$scope.plan || "undefined" != typeof $scope.plan.event.eventId) {
                    var path = $location.path(), initialStep = "step1";
                    /^\/step2/.test(path) && (initialStep = "step2"), /^\/step3/.test(path) && (initialStep = "step3"), 
                    /^\/step4/.test(path) && (initialStep = "step4"), /^\/step5/.test(path) && (initialStep = "step5"), 
                    "_=_" === path && (initialStep = "step2"), $scope.step1 = {}, customer.get() && Object.keys(customer.get()).length > 0 ? $scope.customer = customer.get() : ($scope.customer = {}, 
                    customer.set($scope.customer)), $scope.gotoStep(initialStep);
                }
            });
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]).directive("inviteFriendsWizardButton", [ function() {
    return {
        restrict: "EAC",
        replace: !0,
        cache: !1,
        compile: function() {
            return function(scope, element) {
                element.click(function() {
                });
            };
        }
    };
} ]).directive("pikaday", [ "wembliRpc", "$rootScope", "plan", function(wembliRpc, $rootScope, plan) {
    return {
        restrict: "EAC",
        replace: !0,
        cache: !1,
        compile: function() {
            return function(scope, element) {
                plan.get(function(p) {
                    var startDate = new Date(), endDate = new Date(p.event.eventDate), now = startDate.getTime(), defaultDate = new Date(now + 2592e5);
                    "undefined" != typeof p.rsvpDate && (console.log("init datepicker with date: " + p.rsvpDate), 
                    defaultDate = new Date(p.rsvpDate)), element.pikaday({
                        bound: !1,
                        minDate: startDate,
                        maxDate: endDate,
                        defaultDate: defaultDate,
                        setDefaultDate: !0,
                        onSelect: function() {
                            scope.plan.rsvpDate = this.getDate(), wembliRpc.fetch("invite-friends.submit-rsvp", {
                                rsvpDate: scope.plan.rsvpDate
                            }, function() {
                                $rootScope.$broadcast("plan-rsvp-changed", scope.plan.rsvpDate);
                            });
                        }
                    });
                });
            };
        }
    };
} ]).directive("invitationWizardStep1", [ "wembliRpc", "$window", "customer", "plan", "loggedIn", "pixel", "googleAnalytics", function(wembliRpc, $window, customer, plan, loggedIn, pixel, googleAnalytics) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.listId = "a55323395c", $scope.$on("forgot-password-email-sent", function(e, err) {
                err ? $scope.forgotPasswordEmailError = !0 : ($scope.forgotPasswordEmailError = !1, 
                $scope.forgotPasswordEmailSent = !0);
            }), $scope.initSignupForm = function() {
                console.log("init signup form"), plan.get(function(p) {
                    $scope.next = "/plan/" + p.guid + "/2", console.log($scope.customer), $scope.customer && $scope.customer.email ? (console.log("got a customer in scope"), 
                    $scope.navData["nav-step1"] = $scope.customer.email, $scope.stepCompleted["nav-step1"] = !0, 
                    $scope.showSignupView = !0) : (console.log("no customer"), $scope.showSignupForm = !0);
                });
            }, $scope.showForm = function(show, hide) {
                $scope[show] = !0, $scope[hide] = !1;
            }, $scope.submitSignup = function() {
                if ($scope.forgotPasswordEmailError = !1, $scope.forgotPasswordEmailSent = !1, $scope.signup.$valid) {
                    $("#invitation-modal").modal("loading");
                    var rpcArgs = {
                        firstName: $scope.customer.firstName,
                        lastName: $scope.customer.lastName,
                        email: $scope.customer.email,
                        next: $scope.next,
                        listId: $scope.listId
                    };
                    wembliRpc.fetch("invite-friends.submit-signup", rpcArgs, function(err, result) {
                        if ($("#invitation-modal").modal("loading"), result.exists && !result.noPassword) return $scope.login.accountExists = !0, 
                        $scope.showForm("showLoginForm", "showSignupForm");
                        if (result.noPassword) return $scope.showForm("showLoginUnconfirmedForm", "showSignupForm");
                        if (result.formError) return void ($scope.signup.formError = !0);
                        $scope.customer = customer.get(), $scope.navData["nav-step1"] = $scope.customer.email, 
                        $scope.stepCompleted["nav-step1"] = !0, $scope.signup.success = !0, $scope.showForm("showSignupView", "showSignupForm"), 
                        console.log("submit signup succes - fire pixel");
                        var gCookie = googleAnalytics.getCookie();
                        return pixel.fire({
                            type: "signup",
                            campaign: gCookie.__utmz.utmccn,
                            source: "google",
                            medium: gCookie.__utmz.utmcmd,
                            term: gCookie.__utmz.utmctr,
                            content: "1070734106"
                        }), pixel.fire({
                            type: "signup",
                            campaign: "Signup Conversion Pixel Facebook Ad",
                            source: "facebook",
                            medium: "cpc",
                            term: "",
                            content: "6013588786171"
                        }), $scope.gotoStep("step2");
                    });
                }
            }, $scope.submitLogin = function() {
                if ($scope.forgotPasswordEmailError = !1, $scope.forgotPasswordEmailSent = !1, $scope.login.$valid) {
                    $("#invitation-modal").modal("loading");
                    var rpcArgs = {
                        email: $scope.customer.email,
                        password: $scope.customer.password
                    };
                    wembliRpc.fetch("invite-friends.submit-login", rpcArgs, function(err, result) {
                        return $("#invitation-modal").modal("loading"), result.noPassword ? $scope.showForm("showLoginUnconfirmedForm", "showLoginForm") : result.invalidCredentials ? void ($scope.login.invalidCredentials = !0) : ($scope.navData["nav-step1"] = $scope.customer.email, 
                        $scope.stepCompleted["nav-step1"] = !0, $scope.login.success = !0, $scope.showForm("showSignupView", "showLoginForm"), 
                        $scope.gotoStep("step2"));
                    });
                }
            };
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]).directive("invitationWizardStep2", [ "wembliRpc", "$window", "$filter", "plan", function(wembliRpc, $window, $filter) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.submitRsvp = function() {
                if (!$scope.customer.email) return $scope.signup.noContinue = !0, $scope.gotoStep("step1");
                $("#invitation-modal").modal("loading");
                var rpcArgs = {
                    rsvpDate: $scope.plan.rsvpDate
                };
                wembliRpc.fetch("invite-friends.submit-rsvp", rpcArgs, function(err, result) {
                    return $("#invitation-modal").modal("loading"), result.noCustomer ? ($scope.signup.noContinue = !0, 
                    $scope.gotoStep("step1")) : $scope.gotoStep("step3");
                });
            }, $scope.$watch("plan", function(newVal) {
                newVal && $scope.plan.rsvpDate && ($scope.navData["nav-step2"] = $filter("date")($scope.plan.rsvpDate, "mediumDate"), 
                $scope.stepCompleted["nav-step2"] = !0);
            }), $scope.$on("plan-rsvp-changed", function(e, date) {
                $scope.plan.rsvpDate = date, $scope.navData["nav-step2"] = $filter("date")($scope.plan.rsvpDate, "mediumDate"), 
                $scope.stepCompleted["nav-step2"] = !0;
            });
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]).directive("invitationWizardStep3", [ "wembliRpc", "$window", "facebook", "plan", "$http", "$rootScope", function(wembliRpc, $window, facebook, plan, $http, $rootScope) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.navData["nav-step3"] = 0, $scope.stepCompleted["nav-step3"] = !1, $scope.handleFriendsFetch = function() {
                var mergePlanFriends = function(fbFriends, planFriends) {
                    angular.forEach(fbFriends, function(ff) {
                        angular.forEach(planFriends, function(pf) {
                            "facebook" === pf.contactInfo.service && pf.contactInfo.serviceId == ff.id && (ff.inviteStatus = pf.inviteStatus, 
                            ff.checked = pf.inviteStatus, ff.rsvp = pf.rsvp, $scope.navData["nav-step3"]++);
                        });
                    }), $scope.$apply(function() {
                        $scope.facebook.friends = fbFriends;
                    });
                }, fbFriends = facebook.getFriends();
                $scope.planFriends = plan.getFriends(), mergePlanFriends(fbFriends, $scope.planFriends);
            }, $scope.handleProfileFetch = function(response) {
                "undefined" != typeof response && ($scope.facebook.firstName = response.first_name, 
                $scope.facebook.lastName = response.last_name, $scope.facebook.email = response.email, 
                "undefined" != typeof $scope.customer && ("undefined" == typeof $scope.customer.firstName && ($scope.customer.firstName = response.first_name), 
                "undefined" == typeof $scope.customer.lastName && ($scope.customer.lastName = response.last_name), 
                "undefined" == typeof $scope.customer.email && ($scope.customer.email = response.email)));
            }, $scope.addFacebookFriend = function(friend, $event) {
                if ("input" === $event.target.localName) {
                    var addFriendArgs = {
                        name: friend.name,
                        inviteStatus: !1,
                        imageUrl: "https://graph.facebook.com/" + friend.id + "/picture",
                        service: "facebook",
                        serviceId: friend.id
                    };
                    $("#invitation-modal").modal("loading"), plan.addFriend(addFriendArgs, function(err, result) {
                        return $("#invitation-modal").modal("loading"), result.noCustomer ? ($scope.signup.noContinue = !0, 
                        $scope.gotoStep("step1")) : void ($event.currentTarget.control.checked && facebook.feedDialog({
                            guid: $scope.plan.guid,
                            token: result.friend.inviteStatusConfirmation.token,
                            to: result.friend.contactInfo.serviceId,
                            eventName: $scope.plan.event.eventName,
                            venue: $scope.plan.event.eventVenue,
                            rsvpDate: $("#rsvp-date").val()
                        }, function(response) {
                            null === response ? $scope.handleFriendsFetch() : $http.get("/callback/facebook/rsvp/" + $scope.plan.guid + "/" + result.friend.inviteStatusConfirmation.token).success(function() {
                                plan.fetch(function() {
                                    $rootScope.$broadcast("plan-friends-changed", plan.getFriends());
                                });
                            });
                        }));
                    });
                }
            }, $scope.facebook = {
                loginStatusLoaded: !1,
                friendFilterKey: null,
                service: facebook
            }, null === facebook.getAuth() ? $scope.$on("facebook-login-status", function() {
                $scope.$apply(function() {
                    $scope.facebook.loginStatusLoaded = !0;
                }), facebook.getAuth() && (facebook.api("/me", $scope.handleProfileFetch), facebook.api("/me/friends", $scope.handleFriendsFetch));
            }) : ($scope.facebook.loginStatusLoaded = !0, facebook.getAuth() && (facebook.api("/me", $scope.handleProfileFetch), 
            facebook.api("/me/friends", $scope.handleFriendsFetch))), $scope.$on("facebook-login", function() {
                facebook.getAuth() && (facebook.api("/me", $scope.handleProfileFetch), facebook.api("/me/friends", $scope.handleFriendsFetch));
            });
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]).directive("invitationWizardStep4", [ "wembliRpc", "$window", "twitter", "plan", "$http", "$rootScope", "$location", "$filter", function(wembliRpc, $window, twitter, plan, $http, $rootScope, $location, $filter) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.navData["nav-step4"] = 0, $scope.stepCompleted["nav-step4"] = !1, $scope.handleSearchUsers = function() {
                var mergePlanFriends = function(twitFriends, planFriends) {
                    angular.forEach(twitFriends, function(tf) {
                        angular.forEach(planFriends, function(pf) {
                            "twitter" === pf.contactInfo.service && pf.contactInfo.serviceId == tf.id && (tf.inviteStatus = pf.inviteStatus, 
                            tf.checked = pf.inviteStatus, tf.rsvp = pf.rsvp, $scope.navData["nav-step4"]++);
                        });
                    }), $scope.twitter.spinner = !1, $scope.twitter.friends = twitFriends;
                };
                $scope.stepCompleted["nav-step4"] = !0;
                var twitFriends = twitter.getFriends();
                $scope.planFriends = plan.getFriends(), mergePlanFriends(twitFriends, $scope.planFriends);
            }, $scope.addTwitterFriend = function(friend) {
                var addFriendArgs = {
                    name: friend.name,
                    inviteStatus: !1,
                    imageUrl: friend.profile_image_url_https,
                    service: "twitter",
                    serviceId: friend.id
                };
                $("#invitation-modal").modal("loading"), plan.addFriend(addFriendArgs, function(err, result) {
                    if ($("#invitation-modal").modal("loading"), result.noCustomer) return $scope.signup.noContinue = !0, 
                    $("#invitation-modal").modal("loading"), $scope.gotoStep("step1");
                    $scope.twitter.token = result.friend.inviteStatusConfirmation.token, $("#modal-" + friend.screen_name).modal("show");
                    var rsvpUrl = "http://" + $location.host() + "/rsvp/" + $scope.plan.guid + "/" + $scope.twitter.token + "/twitter";
                    $scope.twitter.messageText = "@" + friend.screen_name + " You are invited to an outing I am planning with @wembli | RSVP By " + $filter("date")($scope.plan.rsvpDate, "M/d/yy") + " | " + rsvpUrl, 
                    $scope.twitter.countChars();
                });
            };
            var timer;
            $scope.twitter = {
                token: null,
                loginStatusLoaded: !1,
                friendFilterKey: null,
                charCount: 140,
                countChars: function() {
                    var urlCount = 20 * ($scope.twitter.messageText.split("http").length - 1), matchUrl = new RegExp("(^|[ 	\r\n])(http|https):([a-zA-Z0-9$_.+!*(),;/?:@&~=%-]*)", "g"), rpl = $scope.twitter.messageText.replace(matchUrl, "");
                    $scope.twitter.charCount = 140 - rpl.length - urlCount;
                },
                searchUsers: function() {
                    $scope.twitter.spinner = !0, clearTimeout(timer), timer = setTimeout(function() {
                        twitter.searchUsers($scope.twitter.friendFilterKey, {}, $scope.handleSearchUsers);
                    }, 1e3);
                },
                tweet: function(friend) {
                    twitter.tweet({
                        tweet: $scope.twitter.messageText
                    }, function(err, res) {
                        null === res ? $scope.handleFriendsFetch() : (friend.checked = !0, $http.get("/callback/twitter/rsvp/" + $scope.plan.guid + "/" + $scope.twitter.token).success(function() {
                            plan.fetch(function() {
                                $rootScope.$broadcast("plan-friends-changed", plan.getFriends());
                            });
                        })), $("#modal-" + friend.screen_name).modal("hide");
                    });
                },
                service: twitter
            }, null === twitter.getAuth() ? $scope.$on("twitter-login-status", function() {
                $scope.twitter.loginStatusLoaded = !0, twitter.getAuth() && twitter.fetchProfile($scope.handleProfileFetch);
            }) : ($scope.twitter.loginStatusLoaded = !0, twitter.getAuth() && twitter.fetchProfile($scope.handleProfileFetch)), 
            $scope.$on("twitter-login", function() {
                twitter.getAuth() && twitter.fetchProfile($scope.handleProfileFetch);
            });
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]).directive("invitationWizardStep5", [ "wembliRpc", "$window", "plan", "$timeout", "$rootScope", function(wembliRpc, $window, plan, $timeout, $rootScope) {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            $scope.navData["nav-step5"] = 0, $scope.stepCompleted["nav-step5"] = !1, $scope.selectedFriends = [], 
            $scope.wemblimail = {
                friends: []
            }, plan.get(function() {
                if ("undefined" != typeof plan.getFriends()) for (var i = plan.getFriends().length - 1; i >= 0; i--) {
                    var friend = plan.getFriends()[i];
                    friend.checked = friend.inviteStatus, "wemblimail" === friend.contactInfo.service && ($scope.wemblimail.friends.push(friend), 
                    $scope.selectedFriends[friend.contactInfo.serviceId] = friend.inviteStatus, $scope.navData["nav-step5"]++);
                }
            }), $scope.sendWemblimail = function() {
                if ($scope.wemblimailForm.$valid) {
                    $scope.stepCompleted["nav-step5"] = !0, $("#invitation-modal").modal("loading");
                    var addFriendArgs = {
                        name: $scope.wemblimail.name,
                        message: $scope.wemblimail.messageText,
                        inviteStatus: !1,
                        imageUrl: null,
                        service: "wemblimail",
                        serviceId: $scope.wemblimail.email
                    };
                    wembliRpc.fetch("invite-friends.sendWemblimail", addFriendArgs, function(err, result) {
                        if ($("#invitation-modal").modal("loading"), !$scope.customer.email) return $scope.signup.noContinue = !0, 
                        $scope.gotoStep("step1");
                        if (result.noCustomer) return $scope.signup.noContinue = !0, $scope.gotoStep("step1");
                        if (result.isOrganizer) return void ($scope.isOrganizer = !0);
                        var friend = result.friend;
                        friend.checked = friend.inviteStatus, "undefined" == typeof $scope.selectedFriends[friend.contactInfo.serviceId] && ($scope.wemblimail.friends.unshift(friend), 
                        $scope.wemblimail.formStatus = !0), $scope.wemblimail.lastSentEmail = $scope.wemblimail.email, 
                        "queued" === friend.rsvp.status ? $scope.successUnconfirmed = !0 : $scope.successConfirmed = !0;
                        $timeout(function() {
                            $scope.wemblimail.name = null, $scope.wemblimail.email = null, $scope.wemblimail.messageText = null, 
                            $scope.wemblimail.formstatus = !1;
                        }, 1500);
                        $scope.selectedFriends[friend.contactInfo.serviceId] = friend.checked, plan.fetch(function() {
                            $rootScope.$broadcast("plan-friends-changed", plan.getFriends());
                        });
                    });
                }
            };
        } ],
        compile: function() {
            return function() {};
        }
    };
} ]);