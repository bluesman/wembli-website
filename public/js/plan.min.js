/*! wembli-website 2014-07-02 */
"use strict";

angular.module("wembliApp", [ "ngRoute", "mgcrea.ngStrap", "wembliApp.controllers", "wembliApp.controllers.plan", "wembliApp.controllers.header", "wembliApp.filters", "wembliApp.filters.plan", "wembliApp.filters.invitation-wizard", "wembliApp.services", "wembliApp.services.header", "wembliApp.services.facebook", "wembliApp.services.twitter", "wembliApp.services.pixel", "wembliApp.services.plan", "wembliApp.services.google", "wembliApp.directives", "wembliApp.directives.header", "wembliApp.directives.plan" ]).config([ "$routeProvider", "$locationProvider", function() {} ]).run([ "$timeout", "$rootScope", "initRootScope", "$window", "facebook", "twitter", "plan", "overlay", "planNav", function($timeout, $scope, initRootScope, $window, facebook, twitter, plan, overlay, planNav) {
    overlay.loading(!0), overlay.show(), planNav.onActivate(function() {
        overlay.loading(!1), overlay.hide();
    }), $timeout(function() {
        plan.fetch(function() {});
    }), $window.fbAsyncInit = function() {
        facebook.getLoginStatus(), $scope.facebook = facebook;
    }, twitter.getLoginStatus();
} ]), angular.module("wembliApp.controllers.plan", []).controller("RestaurantsOffsiteCtrl", [ "$scope", "plan", "$http", "$rootScope", "$location", function($scope, plan, $http, $rootScope, $location) {
    plan.get(function(p) {
        $scope.plan = p;
    }), $scope.$on("restaurants-offsite-clicked", function(e, args) {
        $scope.amountPaid = args.amountPaid, $scope.eventId = args.eventId, $scope.eventName = args.eventName, 
        $scope.restaurantId = args.restaurantId, $scope.restaurant = args.restaurant, $scope.qty = args.qty;
    }), $scope.showButton = function() {
        return "bought" === $scope.restaurantsOffsite;
    }, $scope.submitForm = function() {
        plan.addRestaurantReceipt({
            restaurantId: $scope.restaurantId,
            service: $scope.restaurant.service,
            receipt: {
                qty: $scope.qty,
                amountPaid: $scope.amountPaid
            }
        }, function(err, result) {
            $("#restaurants-offsite-modal").modal("hide"), $location.path("/plan");
            var r = plan.getRestaurants(), newR = [];
            if ("undefined" == typeof r[0]) newR.push(result.restaurant); else for (var i = 0; i < r.length; i++) newR.push((r[i]._id = result.restaurant._id) ? result.restaurant : r[i]);
            plan.setRestaurants(newR), $rootScope.$broadcast("restaurants-changed", {
                restaurants: newR
            });
        });
    }, $scope.cancelForm = function() {
        plan.removeRestaurant({
            restaurantId: $scope.restaurantId
        }, function(err, results) {
            $("#restaurants-offsite-modal").modal("hide"), $rootScope.$broadcast("restaurants-changed", {
                restaurants: results.restaurants
            });
        });
    };
} ]).controller("HotelsOffsiteCtrl", [ "$scope", "plan", "$http", function($scope, plan, $http) {
    plan.get(function(p) {
        $scope.plan = p;
    }), $scope.$on("tickets-offsite-clicked", function(e, args) {
        $scope.qty = args.qty, $scope.amountPaid = args.amountPaid, $scope.eventId = args.eventId, 
        $scope.eventName = args.eventName, $scope.sessionId = args.sessionId, $scope.ticketGroup = args.ticketGroup, 
        $scope.ticketId = args.ticketId;
    }), $scope.showButton = function() {
        return "bought" === $scope.ticketsOffsite;
    }, $scope.submitForm = function() {
        $http.get("http://tom.wembli.com/callback/tn/checkout?request_id=" + $scope.sessionId + "&event_id=" + $scope.eventId);
    }, $scope.cancelForm = function() {
        plan.removeTicketGroup({
            ticketId: $scope.ticketId
        }, function() {
            $("#tickets-offsite-modal").modal("hide");
        });
    };
} ]).controller("ParkingOffsiteCtrl", [ "$scope", "plan", "$http", "$location", "$rootScope", function($scope, plan, $http, $location, $rootScope) {
    plan.get(function(p) {
        $scope.plan = p;
    }), $scope.$on("parking-offsite-clicked", function(e, args) {
        $scope.amountPaid = args.amountPaid, $scope.eventId = args.eventId, $scope.eventName = args.eventName, 
        $scope.parkingId = args.parkingId, $scope.parking = args.parking, $scope.qty = args.qty;
    }), $scope.showButton = function() {
        return "bought" === $scope.parkingOffsite;
    }, $scope.submitForm = function() {
        plan.addParkingReceipt({
            parkingId: $scope.parkingId,
            service: $scope.parking.service,
            receipt: {
                qty: $scope.qty,
                amountPaid: $scope.amountPaid
            }
        }, function(err, result) {
            $("#parking-offsite-modal").modal("hide"), $location.path("/plan");
            var p = plan.getParking(), newP = [];
            if ("undefined" == typeof p[0]) newP.push(result.parking); else for (var i = 0; i < p.length; i++) newP.push((p[i]._id = result.parking._id) ? result.parking : p[i]);
            plan.setParking(newP), $rootScope.$broadcast("parking-changed", {
                parking: newP
            });
        });
    }, $scope.cancelForm = function() {
        plan.removeParking({
            parkingId: $scope.parkingId
        }, function(err, results) {
            $("#parking-offsite-modal").modal("hide"), $rootScope.$broadcast("parking-changed", {
                parking: results.parking
            });
        });
    };
} ]).controller("PlanCtrl", [ "$scope", "plan", "customer", "overlay", "cart", function($scope, plan, customer, overlay, cart) {
    $scope.buyTickets = function() {
        overlay.show(), $scope.buyTicketsOffsite = !0;
    }, $scope.removeTicketGroup = function() {
        $scope.buyTicketsOffsite = !1, overlay.hide();
    }, $scope.activateSection = function(sectionName) {
        console.log("activateSection " + sectionName);
        var sectionName = sectionName.split("-")[2];
        planNav.activate(sectionName), googleMap.resize();
    }, $scope.friendsPonyUp = function(friends) {
        for (var tickets = plan.getTickets(), parking = plan.getParking(), restaurants = plan.getRestaurants(), i = 0; i < friends.length; i++) {
            if (friends[i].suggestedPonyUpAmount = 0, "undefined" != typeof tickets[0] && "undefined" != typeof tickets[0].costBreakdown) {
                "undefined" == typeof friends[i].tickets && (friends[i].tickets = {}), friends[i].tickets = tickets[0];
                var suggested = friends[i].tickets.costBreakdown.totalEach * friends[i].rsvp.guestCount + friends[i].tickets.costBreakdown.deliveryFeeEach;
                friends[i].tickets.suggestedPonyUpAmount = suggested.toFixed(2), friends[i].suggestedPonyUpAmount += parseFloat(suggested);
            } else friends[i].tickets = [];
            if ("undefined" != typeof parking[0] && "undefined" != typeof parking[0].costBreakdown) {
                friends[i].parking = parking[0];
                var suggested = friends[i].parking.costBreakdown.totalEach * friends[i].rsvp.guestCount;
                friends[i].parking.suggestedPonyUpAmount = suggested.toFixed(2), friends[i].suggestedPonyUpAmount += parseFloat(suggested);
            } else friends[i].parking = [];
            if ("undefined" != typeof restaurants[0] && "undefined" != typeof restaurants[0].costBreakdown) {
                friends[i].restaurants = restaurants[0];
                var suggested = friends[i].restaurants.costBreakdown.totalEach * friends[i].rsvp.guestCount;
                friends[i].restaurants.suggestedPonyUpAmount = suggested.toFixed(2), friends[i].suggestedPonyUpAmount += parseFloat(suggested);
            } else friends[i].restaurants = [];
            friends[i].suggestedPonyUpAmount = parseFloat(friends[i].suggestedPonyUpAmount).toFixed(2);
        }
        return friends;
    }, $scope.calcTotalComing = function() {
        if ($scope.totalComing = 0, $scope.friendsComing = [], $scope.totalPoniedUp = 0, 
        $scope.friends) {
            for (var i = 0; i < $scope.friends.length; i++) if ($scope.friends[i].customerId !== customer.get().id) {
                if ($scope.friends[i].rsvp.decision && $scope.friends[i].inviteStatus) {
                    $scope.totalComing = parseInt($scope.totalComing) + parseInt($scope.friends[i].rsvp.guestCount), 
                    $scope.friendsComing.push($scope.friends[i]), $scope.friends[i].totalPoniedUp = 0;
                    for (var j = 0; j < $scope.friends[i].payment.length; j++) {
                        var p = $scope.friends[i].payment[j];
                        "request" !== p.type && ($scope.friends[i].totalPoniedUp += p.amount);
                    }
                    $scope.totalPoniedUp += parseInt($scope.friends[i].totalPoniedUp);
                }
            } else $scope.me.rsvp.decision && ($scope.totalComing = parseInt($scope.totalComing) + parseInt($scope.me.rsvp.guestCount), 
            $scope.friendsComing.push($scope.me), $scope.friends[i] = $scope.me);
            $scope.plan.organizer.rsvp.decision && ($scope.totalComing = parseInt($scope.totalComing) + parseInt($scope.plan.organizer.rsvp.guestCount));
        }
    }, $scope.setSelectedQty = function() {
        angular.forEach($scope.tickets, function(t) {
            "undefined" == typeof t.ticketGroup.selectedQty && (angular.forEach(t.ticketGroup.ValidSplits.int, function(split) {
                console.log("valid split: " + split + " == " + $scope.totalComing), split == $scope.totalComing && (t.ticketGroup.selectedQty = parseInt(split));
            }), "undefined" == typeof t.ticketGroup.selectedQty && (console.log("using last split"), 
            t.ticketGroup.selectedQty = parseInt(t.ticketGroup.ValidSplits.int[t.ticketGroup.ValidSplits.int.length - 1])));
        });
    }, $scope.reconcileTicketQty = function() {
        if ("undefined" != typeof $scope.tickets) {
            for (var sum = 0, i = 0; i < $scope.tickets.length; i++) {
                var t = $scope.tickets[i];
                sum += parseInt(t.ticketGroup.selectedQty);
            }
            sum > 0 && ($scope.ticketCountMismatch = !0, sum >= $scope.totalComing && ($scope.ticketCountMismatch = !1));
        }
    }, $scope.acknowledgeNotification = function(key) {
        plan.acknowledgeNotification(key);
    }, $scope.serviceFee = function(price) {
        return .15 * price;
    }, $scope.showEllipses = function(ary, len) {
        return "undefined" != typeof ary ? ary.join(", ").length > len : void 0;
    }, $scope.$watch("restaurants", function(newVal, oldVal) {
        "undefined" != typeof newVal && oldVal !== newVal && (cart.totals("restaurants"), 
        $scope.friendsPonyUp($scope.friends));
    }), $scope.$watch("hotels", function(newVal, oldVal) {
        "undefined" != typeof newVal && oldVal !== newVal && (cart.totals("hotels"), $scope.friendsPonyUp($scope.friends));
    }), $scope.$watch("parking", function(newVal, oldVal) {
        "undefined" != typeof newVal && oldVal !== newVal && ($scope.friendsPonyUp($scope.friends), 
        cart.totals("parking"));
    }), $scope.$watch("tickets", function(newVal, oldVal) {
        "undefined" != typeof newVal && oldVal !== newVal && (cart.totals("tickets"), $scope.friendsPonyUp($scope.friends), 
        $scope.setSelectedQty());
    }), plan.get(function(p) {
        $scope.plan = p, $scope.organizer = plan.getOrganizer(), $scope.tickets = plan.getTickets(), 
        $scope.parking = plan.getParking(), $scope.hotels = plan.getHotels(), $scope.restaurants = plan.getRestaurants(), 
        $scope.friends = plan.getFriends(), $scope.context = plan.getContext(), console.log("GETTING PLAN INFO:"), 
        console.log("plan:"), console.log($scope.plan), console.log("organizer"), console.log($scope.organizer), 
        console.log("tickets"), console.log($scope.tickets), console.log("friends"), console.log($scope.friends), 
        console.log("parking"), console.log($scope.parking), console.log("restaurants"), 
        console.log($scope.restaurants), console.log("hotels"), console.log($scope.hotels), 
        console.log("context"), console.log($scope.context);
        for (var i = 0; i < $scope.friends.length; i++) $scope.friends[i].customerId === customer.get().id && ($scope.me = $scope.friends[i]);
        $scope.calcTotalComing(), $scope.setSelectedQty(), $scope.friendsPonyUp($scope.friends), 
        $scope.canRequestPonyUp = $scope.friendsComing && $scope.friendsComing.length > 0;
    });
} ]).controller("OrganizerPlanCtrl", [ "$scope", "cart", "plan", "$location", "wembliRpc", "overlay", "ticketPurchaseUrls", "notifications", function($scope, cart, plan, $location, wembliRpc, overlay, ticketPurchaseUrls, notifications) {
    $scope.tnUrl = ticketPurchaseUrls.tn, $scope.$watch("plan.tickets[0].ticketGroup.selectedQty", function() {
        "undefined" != typeof newVal && oldVal !== newVal && (cart.totals("tickets"), $scope.friendsPonyUp(scope.friends), 
        $scope.reconcileTicketQty());
    }), $scope.setPayment = function(addOn, value) {
        $scope.plan.preferences[addOn].payment = value, $scope.savePrefs(function() {
            var path = "/" + addOn + "/" + $scope.plan.event.eventId + "/" + $scope.plan.event.eventName;
            $location.path(path);
        });
    }, $scope.removeTicketGroup = function(ticketId) {
        wembliRpc.fetch("plan.removeTicketGroup", {
            ticketId: ticketId
        }, function(err, result) {
            $scope.tickets = plan.setTickets(result.tickets), $scope.plan = result.plan;
        });
    }, $scope.$watch("rsvpCompleteNotification", function(n) {
        "undefined" != typeof n && notifications.update();
    }), $scope.$watch("plan", function(p) {
        "undefined" != typeof p && (plan.rsvpComplete(function(complete) {
            !p.rsvpComplete && complete && plan.submitRsvpComplete(!0, function(err, result) {
                $scope.plan.rsvpComplete = result.plan.rsvpComplete, $scope.plan.rsvpCompleteDate = result.plan.rsvpCompleteDate, 
                $scope.rsvpCompleteNotification = !0;
            });
        }), console.log(p), angular.forEach(p.notifications, function(n) {
            "rsvpComplete" === n.key && ($scope.rsvpCompleteNotification = !0);
        }));
    });
} ]).controller("OrganizerRsvpCtrl", [ "$rootScope", "$scope", "plan", "planNav", "wembliRpc", function($rootScope, $scope, plan, planNav, wembliRpc) {
    var makeRsvpDays = function() {
        var rsvpTime = new Date($scope.plan.rsvpDate).getTime(), now = new Date().getTime(), difference = rsvpTime - now, hour = 36e5, day = 24 * hour;
        if (difference > 0) if (day > difference) $scope.rsvpDays = "That's today!"; else {
            var days = difference / day;
            if (14 > days) {
                var d = 1 == parseInt(days) ? "day" : "days";
                $scope.rsvpDays = "That's in " + parseInt(days) + " " + d + "!";
            }
        } else $scope.plan.rsvpComplete && ($scope.rsvpDays = "RSVP Date has passed.");
    };
    $scope.guestCountKeyUp = function() {
        "" !== $scope.plan.organizer.rsvp.guestCount && ($scope.calcTotalComing(), wembliRpc.fetch("plan.submitOrganizerRsvp", {
            decision: $scope.plan.organizer.rsvp.decision,
            guestCount: $scope.plan.organizer.rsvp.guestCount
        }, function() {}));
    }, $scope.guestCountKeyDown = function(scope, elm, attr, e) {
        38 == e.keyCode && $scope.plan.organizer.rsvp.guestCount++, 40 == e.keyCode && ($scope.plan.organizer.rsvp.guestCount--, 
        $scope.plan.organizer.rsvp.guestCount < 0 && ($scope.plan.organizer.rsvp.guestCount = 0));
    };
    var savePrefs = function(n, o) {
        "undefined" != typeof n && "undefined" != typeof o && n !== o && plan.savePreferences({
            preferences: $scope.plan.preferences
        }, function() {
            $scope.calcTotalComing();
        });
    };
    $scope.$watch("plan.preferences.inviteOptions.guestFriends", savePrefs), $scope.$watch("plan.preferences.inviteOptions.over21", savePrefs), 
    $scope.$watch("plan.preferences.guestList", savePrefs), $scope.setRsvp = function(rsvp) {
        $scope.plan.organizer.rsvp.decision = rsvp, $scope.plan.organizer.rsvp.decision === !1 && ($scope.plan.organizer.rsvp.guestCount = 0), 
        $scope.plan.organizer.rsvp.decision === !0 && 0 == $scope.plan.organizer.rsvp.guestCount && ($scope.plan.organizer.rsvp.guestCount = 1), 
        $scope.calcTotalComing(), wembliRpc.fetch("plan.submitOrganizerRsvp", {
            decision: $scope.plan.organizer.rsvp.decision,
            guestCount: $scope.plan.organizer.rsvp.guestCount
        }, function() {});
    }, $scope.$watch("plan", function(p) {
        "undefined" != typeof p && (console.log("rsvpDate: " + $scope.plan.rsvpDate), makeRsvpDays(), 
        null === $scope.plan.organizer.rsvp.decision && $scope.setRsvp(!0));
    }), planNav.activate("rsvp");
} ]).controller("OrganizerCartCtrl", [ "$scope", "plan", "planNav", function($scope, plan, planNav) {
    planNav.activate("cart"), $scope.$watch("buyTicketsOffsite", function(n) {
        console.log("buyTicketsOffsite: " + n);
    }), $scope.showChangeTicketsLink = function() {
        plan.get(function(p) {
            return p.tickets && p.tickets.length > 0;
        });
    }, $scope.showTicketPriceDetails = {}, $scope.toggleTicketPriceDetails = function(ticketId) {
        "undefined" == typeof $scope.showTicketPriceDetails[ticketId] ? $scope.showTicketPriceDetails[ticketId] = !0 : delete $scope.showTicketPriceDetails[ticketId];
    };
} ]).controller("OrganizerPonyUpCtrl", [ "$scope", "plan", "planNav", function($scope, plan, planNav) {
    $scope.submitOutsidePayment = function(friendId) {
        angular.forEach($scope.friends, function(f) {
            if (f._id == friendId) {
                if (!f.ponyUp.outsideSourceAmount || 0 == parseFloat(f.ponyUp.outsideSourceAmount)) return;
                f.ponyUp.submitInProgress = !0, wembliRpc.fetch("plan.submitOutsidePayment", {
                    friendId: friendId,
                    amount: f.ponyUp.outsideSourceAmount,
                    method: f.ponyUp.outsideSourcePaymentMethod,
                    status: "logged"
                }, function(err, result) {
                    if (!err) {
                        if (!result.success) return void (f.error = !0);
                        f.ponyUp.submitInProgress = !1, f.payment = result.friend.payment, $rootScope.$broadcast("plan-friends-changed", plan.getFriends()), 
                        $scope.paymentTotals();
                    }
                });
            }
        });
    }, $scope.removeOutsidePayment = function(friendId, paymentId) {
        for (var i = 0; i < $scope.friends.length; i++) {
            var f = $scope.friends[i];
            if (f._id === friendId) for (var l = f.payment.length, j = 0; l > j; j++) {
                var p = f.payment.shift();
                p._id === paymentId ? (p.removeOutsidePaymentInProgress = !0, wembliRpc.fetch("plan.removeOutsidePayment", {
                    friendId: f._id,
                    paymentId: p._id
                }, function(err, result) {
                    return err ? (p.error = !0, void f.payment.push(p)) : result.success ? (p.removeOutsidePaymentInProgress = !1, 
                    void $scope.paymentTotals()) : (p.error = !0, void f.payment.push(p));
                })) : f.payment.push(p);
            }
        }
    }, $scope.cancelPonyUpRequest = function(friendId, paymentId) {
        for (var i = 0; i < $scope.friends.length; i++) {
            var f = $scope.friends[i];
            if (f._id === friendId) for (var l = f.payment.length, j = 0; l > j; j++) {
                var p = f.payment.shift();
                p._id === paymentId ? (p.cancelPonyUpRequestInProgress = !0, wembliRpc.fetch("plan.cancelPonyUpRequest", {
                    friendId: f._id,
                    paymentId: p._id
                }, function(err, result) {
                    return err ? (p.error = !0, void f.payment.push(p)) : result.success ? (f.payment.push(result.payment), 
                    p.cancelPonyUpRequestInProgress = !1, void $scope.paymentTotals()) : (p.error = !0, 
                    void f.payment.push(p));
                })) : f.payment.push(p);
            }
        }
    }, $scope.resendPonyUp = function(friendId, paymentId) {
        for (var i = 0; i < $scope.friends.length; i++) {
            var f = $scope.friends[i];
            f._id === friendId && angular.forEach(f.payment, function(p) {
                p._id === paymentId && (p.resendPonyUpInProgress = !0, wembliRpc.fetch("plan.resendPonyUpEmail", {
                    friendId: f._id,
                    paymentId: p._id,
                    amount: parseInt(100 * p.amount)
                }, function(err, result) {
                    return err ? void (p.error = !0) : result.success ? (p.status = result.payment.status, 
                    p.date = result.payment.date, p.resendPonyUpInProgress = !1, void (p.resent = !0)) : void (p.error = !0);
                }));
            });
        }
    }, $scope.sendPonyUpEmail = function() {
        if ("undefined" == typeof customer.get().balancedAPI || "undefined" == typeof customer.get().balancedAPI.bankAccounts) return void $("#create-account-modal").modal("show");
        if (!$scope.sendPonyUpInProgress) {
            $scope.sendPonyUpInProgress = !0, $scope.error = $scope.formError = $scope.success = !1;
            for (var ponyUpRequests = [], i = 0; i < $scope.friends.length; i++) {
                var f = $scope.friends[i];
                if ("undefined" != typeof f.ponyUp.amount && f.ponyUp.request) {
                    if (!(parseFloat(f.ponyUp.amount) > 0)) return $scope.error = !1, $scope.success = !1, 
                    $scope.formError = !0, void ($scope.sendPonyUpInProgress = !1);
                    var d = {
                        friendId: f._id,
                        amount: parseInt(100 * parseFloat(f.ponyUp.amount))
                    };
                    ponyUpRequests.push(d);
                }
            }
            return ponyUpRequests[0] ? void wembliRpc.fetch("plan.sendPonyUpEmail", {
                ponyUpRequests: ponyUpRequests
            }, function(err, result) {
                if ($scope.sendPonyUpInProgress = !1, err) return void ($scope.error = !0);
                if (!result.success) return void ($scope.error = !0);
                $scope.success = !0;
                for (var i = 0; i < $scope.friends.length; i++) for (var f = $scope.friends[i], j = 0; j < result.friends.length; j++) {
                    var f2 = result.friends[j];
                    f2._id === f._id && (f.payment = f2.payment);
                }
                $rootScope.$broadcast("plan-friends-changed", plan.getFriends()), $scope.paymentTotals();
            }) : ($scope.error = !1, $scope.success = !1, $scope.formError = !0, void ($scope.sendPonyUpInProgress = !1));
        }
    };
    var dereg = $scope.$on("bank-account-created", function() {
        $scope.sendPonyUpEmail(), dereg();
    });
    $scope.paymentTotals = function() {
        for (var i = 0; i < $scope.friends.length; i++) {
            var requested = 0, received = 0, balance = 0, f = $scope.friends[i];
            f.ponyUp = "undefined" == typeof f.ponyUp ? {} : f.ponyUp, f.ponyUp.open = !1, f.ponyUp.request = !0;
            for (var j = 0; j < f.payment.length; j++) {
                var p = f.payment[j];
                "request" == p.type ? (p.open && (f.ponyUp.open = !0, f.ponyUp.request = !1), "canceled" !== p.status && (requested += parseInt(p.amount), 
                p.amount = parseInt(p.amount))) : received += parseInt(p.amount);
            }
            f.payment.requested = requested, f.payment.received = received, f.payment.balance = balance;
        }
    }, $scope.$watch("friends", function(newVal) {
        newVal && $scope.paymentTotals();
    }), planNav.activate("pony-up");
} ]).controller("OrganizerItineraryCtrl", [ "$scope", "plan", "planNav", function($scope, plan, planNav) {
    var timer;
    $scope.submitNotes = function() {
        clearTimeout(timer), timer = setTimeout(function() {
            wembliRpc.fetch("plan.submitNotes", {
                notes: $scope.plan.notes
            }, function() {});
        }, 2e3);
    }, planNav.activate("itinerary");
} ]).controller("OrganizerChatterCtrl", [ "$scope", "plan", "planNav", function($scope, plan, planNav) {
    planNav.activate("chatter");
} ]).controller("PlanCtrlOff", [ "$scope", "wembliRpc", "$window", "plan", "planNav", "$location", "$rootScope", "googleMap", function($scope, wembliRpc, $window, plan, planNav, $location, $rootScope, googleMap) {
    plan.get(function(p) {
        $scope.plan = p, $scope.activateSection = function(sectionName) {
            console.log("activateSection " + sectionName);
            var sectionName = parseInt(sectionName.charAt(sectionName.length - 1));
            planNav.activate(sectionName), googleMap.resize();
        };
        var activateSection = 1;
        if ($location.path()) {
            var h = $location.path();
            activateSection = "_=_" == h ? 1 : parseInt(h.charAt(h.length - 1)), console.log("activate section from path " + activateSection);
        } else "undefined" != typeof $scope.customer && p.organizer.customerId === $scope.customer.id ? p && p.rsvpComplete && (activateSection = 2, 
        p.tickets[0] || (activateSection = 2), p.preferences.addOns.parking && !p.parking[0] && (activateSection = 2), 
        p.preferences.addOns.restaurants && !p.restaurants[0] && (activateSection = 2), 
        p.preferences.addOns.hotels && !p.hotels[0] && (activateSection = 2)) : activateSection = p.rsvpComplete ? 4 : 1;
        planNav.setActivateSection(activateSection), planNav.setSectionsCount($scope.sections);
    });
} ]), angular.module("wembliApp.directives.plan", []).directive("notification", [ "$timeout", "notifications", function($timeout, notifications) {
    return {
        restrict: "EAC",
        cache: !1,
        compile: function() {
            return function(scope, element) {
                element.click(function() {
                    notifications.update();
                });
            };
        }
    };
} ]).directive("rsvpFor", [ "$rootScope", function($rootScope) {
    return {
        restrict: "C",
        cache: !1,
        compile: function() {
            return function(scope, element, attr) {
                var d = scope.$watch("friend", function() {
                    element.click(function() {
                        var f = JSON.parse(attr.friend);
                        f.rsvp.decision = !0, $rootScope.$broadcast("rsvp-for-clicked", f), $("#rsvp-for-modal").modal("show");
                    }), d();
                });
            };
        }
    };
} ]).directive("resendRsvpEmail", [ "wembliRpc", function(wembliRpc) {
    return {
        restrict: "C",
        compile: function() {
            return function(scope, element, attr) {
                scope.rsvpEmailSent = !1, scope.rsvpEmailInProgress = !1, attr.$observe("friendId", function() {
                    element.click(function() {
                        scope.rsvpEmailInProgress = !0;
                        var rpcArgs = {
                            friendId: attr.friendId
                        };
                        wembliRpc.fetch("plan.resendRsvpEmail", rpcArgs, function() {
                            scope.rsvpEmailSent = !0, scope.rsvpEmailInProgress = !1, scope.$broadcast("rsvp-email-sent");
                        });
                    });
                });
            };
        }
    };
} ]).directive("rsvpForModal", [ "$rootScope", "pluralize", "wembliRpc", "plan", function($rootScope, pluralize, wembliRpc, plan) {
    return {
        restrict: "C",
        cache: !1,
        compile: function() {
            return function(scope) {
                $rootScope.$on("rsvp-for-clicked", function(e, friend) {
                    scope.friend = friend, scope.$watch("friend.rsvp.guestCount", function() {
                        "undefined" == typeof scope.friend.rsvp.guestCount;
                    }), scope.setRsvp = function(rsvp) {
                        scope.friend.rsvp.decision = rsvp;
                    }, scope.saveRsvp = function() {
                        scope.friend.rsvp.decision === !1 && (scope.friend.rsvp.guestCount = 0), scope.friend.rsvp.decision === !0 && 0 == scope.friend.rsvp.guestCount && (scope.friend.rsvp.guestCount = 1);
                        var args = {
                            friendId: scope.friend._id,
                            decision: scope.friend.rsvp.decision,
                            guestCount: scope.friend.rsvp.guestCount,
                            tickets: scope.friend.rsvp.decision
                        };
                        "undefined" != typeof scope.friend.rsvp.parking.decision && (args.parking = scope.friend.rsvp.parking.decision), 
                        "undefined" != typeof scope.friend.rsvp.restaurant.decision && (args.restaurant = scope.friend.rsvp.restaurant.decision), 
                        "undefined" != typeof scope.friend.rsvp.hotel.decision && (args.hotel = scope.friend.rsvp.hotel.decision), 
                        wembliRpc.fetch("plan.submitRsvpFor", args, function(err, result) {
                            scope.friend = result.friend, plan.fetch(function() {
                                $rootScope.$broadcast("plan-friends-changed", plan.getFriends());
                            });
                        });
                    }, scope.guestCountKeyUp = function() {
                        "" !== scope.friend.rsvp.guestCount && (scope.friend.rsvp.decision = scope.friend.rsvp.guestCount > 0, 
                        scope.guestCountPlural = pluralize(scope.friend.rsvp.guestCount));
                    }, scope.guestCountKeyDown = function(scope, elm, attr, e) {
                        38 == e.keyCode && scope.friend.rsvp.guestCount++, 40 == e.keyCode && (scope.friend.rsvp.guestCount--, 
                        scope.friend.rsvp.guestCount < 0 && (scope.friend.rsvp.guestCount = 0));
                    };
                });
            };
        }
    };
} ]).directive("infoSlideDownLabel", [ function() {
    return {
        restrict: "C",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function() {} ],
        compile: function() {
            return function(scope, element, attr) {
                scope.toggle = !1, attr.$observe("friendId", function(friendId) {
                    friendId && element.click(function() {
                        scope.$apply(function() {
                            scope.toggle = !scope.toggle;
                        });
                        var slideKey = "#" + friendId + " ." + attr.key, caretKey = "#" + friendId + " ." + attr.key + "-caret";
                        scope.toggle ? ($(slideKey).slideDown(200), $(caretKey).addClass("icon-caret-down").removeClass("icon-caret-right")) : ($(slideKey).slideUp(100), 
                        $(caretKey).addClass("icon-caret-right").removeClass("icon-caret-down"));
                    });
                });
            };
        }
    };
} ]).directive("planDashboardOff", [ "$templateCache", "$timeout", "$rootScope", "$window", "$location", "wembliRpc", "cart", "plan", "customer", "pluralize", "fetchModals", "planNav", function($templateCache, $timeout, $rootScope, $window, $location, wembliRpc, cart, plan, customer, pluralize) {
    return {
        restrict: "C",
        replace: !0,
        scope: !1,
        controller: [ "$scope", "$element", "$attrs", "$transclude", function() {} ],
        compile: function() {
            return function(scope) {
                $templateCache.removeAll(), scope.$watch("totalComing", function(val) {
                    "undefined" != typeof val && (scope.totalComingPlural = pluralize(scope.totalComing), 
                    scope.reconcileTicketQty());
                }), scope.$watch("me", function(val) {
                    if ("undefined" != typeof val) {
                        for (var f = [], i = 0; i < scope.friends.length; i++) {
                            var friend = scope.friends[i];
                            f.push(friend._id === scope.me._id ? scope.me : friend);
                        }
                        scope.friends = f, scope.friendsPonyUp(scope.friends), scope.calcTotalComing();
                    }
                });
            };
        }
    };
} ]).directive("organizerPlanDashboardOff", [ "$rootScope", "$window", "$location", "wembliRpc", "cart", "plan", "customer", "pluralize", "fetchModals", "planNav", function($rootScope, $window, $location, wembliRpc, cart, plan, customer, pluralize, fetchModals) {
    return {
        restrict: "C",
        scope: !1,
        controller: [ "$scope", "$element", "$attrs", "$transclude", function() {
            fetchModals.fetch("/partials/tickets-offsite", function(err) {});
        } ],
        compile: function() {
            return function() {
                fetchModals.fetch("/partials/modals/organizer-dashboard", function() {
                    plan.get(function() {});
                });
            };
        }
    };
} ]).directive("organizerItinerarySectionOff", [ "wembliRpc", "planNav", function(wembliRpc, planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/itinerary-section/organizer",
        compile: function() {
            return function() {
                console.log("organize itinerary loaded"), planNav.registerSection();
            };
        }
    };
} ]).directive("organizerRsvpSectionOff", [ "planNav", "plan", function(planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/rsvp-section/organizer",
        compile: function() {
            return function() {
                console.log("organize rsvp loaded"), planNav.registerSection();
            };
        }
    };
} ]).directive("organizerCartSectionOff", [ "ticketPurchaseUrls", "plan", "cart", "planNav", function(ticketPurchaseUrls, plan, cart, planNav) {
    return {
        restrict: "E",
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/cart-section/organizer",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function() {} ],
        compile: function() {
            return function(scope) {
                scope.tnUrl = ticketPurchaseUrls.tn, console.log("organize cart loaded"), planNav.registerSection();
                var d = scope.$on("rsvp-complete", function() {
                    scope.plan.rsvpComplete = !0, scope.rsvpComplete = !0, d();
                });
            };
        }
    };
} ]).directive("organizerPonyUpSectionOff", [ "$rootScope", "plan", "wembliRpc", "$timeout", "customer", "planNav", function($rootScope, plan, wembliRpc, $timeout, customer, planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/pony-up-section/organizer",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function() {} ],
        compile: function() {
            return function() {
                console.log("organize pony up loaded"), planNav.registerSection();
            };
        }
    };
} ]).directive("itineraryMap", [ "$rootScope", "googleMap", "plan", "mapInfoWindowContent", "mapVenue", "mapMarker", "$timeout", function($rootScope, googleMap, plan, mapInfoWindowContent, mapVenue, mapMarker) {
    return {
        restrict: "EC",
        cache: !1,
        replace: !0,
        scope: !1,
        compile: function() {
            return function(scope, element, attr) {
                var mapTypeId = attr.mapTypeId ? google.maps.MapTypeId[attr.mapTypeId] : google.maps.MapTypeId.ROADMAP, mapOpts = {
                    mapTypeId: mapTypeId
                };
                mapOpts.center = new google.maps.LatLng(attr.lat, attr.lng), attr.zoom && (mapOpts.zoom = parseInt(attr.zoom)), 
                attr.draggable && (mapOpts.draggable = "true" === attr.draggable ? !0 : !1), mapOpts.scrollwheel = !0, 
                attr.scrollwheel && (mapOpts.scrollwheel = "true" === attr.scrollwheel ? !0 : !1), 
                googleMap.draw(element, mapOpts);
                var placeMarkers = function(p) {
                    var lat = p.venue.data.geocode.geometry.location.lat, lng = p.venue.data.geocode.geometry.location.lng;
                    mapVenue.create(googleMap, {
                        lat: lat,
                        lng: lng,
                        name: p.event.eventVenue,
                        street: p.venue.data.Street1,
                        city: p.event.eventCity,
                        state: p.event.eventState
                    });
                    var parking = plan.getParking();
                    if ("undefined" != typeof parking[0]) {
                        if ("google" === parking[0].service) {
                            var ll = new google.maps.LatLng(parking[0].parking.geometry.location.ob, parking[0].parking.geometry.location.pb);
                            mapMarker.create(googleMap, {
                                icon: "/images/icons/map-icons/transportation/parkinggarage.png",
                                lat: ll.lat(),
                                lng: ll.lng(),
                                name: parking[0].parking.name,
                                body: parking[0].parking.vicinity
                            });
                        }
                        "pw" === parking[0].service && mapMarker.create(googleMap, {
                            icon: "/images/icons/map-icons/transportation/parkinggarage.png",
                            lat: parking[0].parking.lat,
                            lng: parking[0].parking.lng,
                            name: parking[0].parking.location_name,
                            body: parking[0].parking.address + ", " + parking[0].parking.city
                        });
                    }
                    var restaurants = plan.getRestaurants();
                    "undefined" != typeof restaurants[0] && ("google" === restaurants[0].service && mapMarker.create(googleMap, {
                        icon: "/images/icons/map-icons/entertainment/restaurant.png",
                        lat: restaurants[0].restaurant.geometry.location.lat(),
                        lng: restaurants[0].restaurant.geometry.location.lng(),
                        name: restaurants[0].restaurant.name,
                        body: restaurants[0].restaurant.vicinity
                    }), "yipit" === restaurants[0].service && mapMarker.create(googleMap, {
                        icon: "/images/icons/map-icons/entertainment/restaurant.png",
                        lat: restaurants[0].restaurant.business.locations[0].lat,
                        lng: restaurants[0].restaurant.business.locations[0].lon,
                        name: restaurants[0].restaurant.title,
                        body: restaurants[0].restaurant.business.name
                    }));
                };
                plan.get(function(p) {
                    scope.$on("google-map-resize", function() {
                        googleMap.init(), googleMap.draw(element, mapOpts), placeMarkers(p);
                    });
                    var dereg = scope.$on("google-map-drawn", function() {
                        placeMarkers(p);
                    });
                    googleMap.isDrawn() && (dereg(), placeMarkers(p));
                });
            };
        }
    };
} ]).directive("friendPlanDashboard", [ "$window", "$location", "wembliRpc", "plan", "customer", "pluralize", "fetchModals", function($window, $location, wembliRpc, plan, customer, pluralize, fetchModals) {
    return {
        restrict: "C",
        cache: !1,
        replace: !1,
        scope: !1,
        compile: function() {
            return function(scope) {
                var height = angular.element($window).height();
                $("#section6").css("min-height", height), fetchModals.fetch("/partials/modals/friend-dashboard", function() {
                    plan.get(function() {
                        var watchMe = function() {
                            scope.guestCountPlural = pluralize(scope.me.rsvp.guestCount), null === scope.me.rsvp.decision && scope.setRsvp("decision", !0), 
                            "undefined" == typeof scope.me.rsvp.parking.decision && (scope.me.rsvp.parking.decision = !0), 
                            "undefined" == typeof scope.me.rsvp.restaurant.decision && (scope.me.rsvp.restaurant.decision = !0), 
                            "undefined" == typeof scope.me.rsvp.hotel.decision && (scope.me.rsvp.hotel.decision = !1);
                        };
                        if (scope.me) watchMe(); else var d = scope.$watch("me", function(newVal) {
                            "undefined" != typeof newVal && (watchMe(), d());
                        });
                    });
                });
            };
        }
    };
} ]).directive("friendItinerarySection", [ "wembliRpc", "planNav", function(wembliRpc, planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/itinerary-section/friend",
        compile: function() {
            return function() {
                planNav.registerSection();
            };
        }
    };
} ]).directive("friendRsvpSection", [ "planNav", "wembliRpc", "pluralize", function(planNav, wembliRpc, pluralize) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/rsvp-section/friend",
        compile: function() {
            return function(scope) {
                planNav.registerSection(), scope.setRsvp = function(rsvp) {
                    scope.me.rsvp.decision = rsvp, scope.me.rsvp.decision === !1 && (scope.me.rsvp.guestCount = 0), 
                    scope.me.rsvp.decision === !0 && 0 == scope.me.rsvp.guestCount && (scope.me.rsvp.guestCount = 1), 
                    wembliRpc.fetch("friend.submitRsvp", {
                        decision: scope.me.rsvp.decision,
                        guestCount: scope.me.rsvp.guestCount
                    }, function(err, result) {
                        scope.me = result.friend;
                    });
                }, scope.guestCountKeyUp = function() {
                    "" !== scope.me.rsvp.guestCount && (scope.me.rsvp.decision = scope.me.rsvp.guestCount > 0, 
                    scope.guestCountPlural = pluralize(scope.me.rsvp.guestCount), scope.calcTotalComing(), 
                    wembliRpc.fetch("friend.submitRsvp", {
                        decision: scope.me.rsvp.decision,
                        guestCount: scope.me.rsvp.guestCount
                    }, function(err, result) {
                        scope.me = result.friend;
                    }));
                }, scope.guestCountKeyDown = function(scope, elm, attr, e) {
                    38 == e.keyCode && scope.me.rsvp.guestCount++, 40 == e.keyCode && (scope.me.rsvp.guestCount--, 
                    scope.me.rsvp.guestCount < 0 && (scope.me.rsvp.guestCount = 0));
                };
            };
        }
    };
} ]).directive("friendVoteSection", [ "planNav", "wembliRpc", function(planNav, wembliRpc) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/vote-section/friend",
        compile: function() {
            return function(scope) {
                planNav.registerSection();
                var submitVote = function() {
                    wembliRpc.fetch("friend.submitVote", {
                        tickets: {
                            number: scope.me.rsvp.guestCount,
                            decision: scope.me.rsvp.decision,
                            price: scope.me.rsvp.tickets.price,
                            priceGroup: scope.me.rsvp.tickets.priceGroup
                        },
                        parking: {
                            number: scope.me.rsvp.guestCount,
                            decision: scope.me.rsvp.parking.decision,
                            price: scope.me.rsvp.parking.price,
                            priceGroup: scope.me.rsvp.parking.priceGroup
                        },
                        restaurant: {
                            number: scope.me.rsvp.guestCount,
                            decision: scope.me.rsvp.restaurant.decision,
                            price: scope.me.rsvp.restaurant.price,
                            priceGroup: scope.me.rsvp.restaurant.priceGroup,
                            preference: scope.me.rsvp.restaurant.preference
                        },
                        hotel: {
                            number: scope.me.rsvp.guestCount,
                            decision: scope.me.rsvp.hotel.decision,
                            price: scope.me.rsvp.hotel.price,
                            priceGroup: scope.me.rsvp.hotel.priceGroup,
                            preference: scope.me.rsvp.hotel.preference
                        }
                    }, function(err, result) {
                        scope.me = result.friend;
                    });
                }, calcVotePriceTotal = function() {
                    var total = 0;
                    parseInt(scope.me.rsvp.tickets.price) > 0 && (total += parseInt(scope.me.rsvp.tickets.price)), 
                    scope.plan.preferences.addOns.parking && parseInt(scope.me.rsvp.parking.price) > 0 && (total += parseInt(scope.me.rsvp.parking.price)), 
                    scope.plan.preferences.addOns.restaurants && parseInt(scope.me.rsvp.restaurant.price) > 0 && (total += parseInt(scope.me.rsvp.restaurant.price)), 
                    scope.plan.preferences.addOns.hotels && parseInt(scope.me.rsvp.hotel.price) > 0 && (total += parseInt(scope.me.rsvp.hotel.price)), 
                    scope.votePriceTotalPerPerson = total, scope.votePriceTotal = total * scope.me.rsvp.tickets.number;
                };
                scope.$watch("me.rsvp.parking.decision", function(val) {
                    "undefined" != typeof val && submitVote();
                }), scope.$watch("me.rsvp.restaurant.decision", function(val) {
                    "undefined" != typeof val && submitVote();
                }), scope.$watch("me.rsvp.hotel.decision", function(val) {
                    "undefined" != typeof val && submitVote();
                }), scope.$watch("me.rsvp.tickets.price", function(val) {
                    "undefined" != typeof val && calcVotePriceTotal();
                }), scope.$watch("me.rsvp.parking.price", function(val) {
                    "undefined" != typeof val && calcVotePriceTotal();
                }), scope.$watch("me.rsvp.restaurant.price", function(val) {
                    "undefined" != typeof val && calcVotePriceTotal();
                }), scope.$watch("me.rsvp.hotel.price", function(val) {
                    "undefined" != typeof val && calcVotePriceTotal();
                });
                var toggleSlider = function(id, val) {
                    $(id).slider(val ? "enable" : "disable");
                }, toggleMultiselect = function(id, val) {
                    $(id).multiselect(val ? "enable" : "disable");
                };
                scope.toggleInputs = function(category, val) {
                    var categories = {
                        restaurant: function(val) {
                            toggleSlider("#restaurant-price-slider", val), toggleMultiselect("#food-preference", val);
                        },
                        parking: function(val) {
                            toggleSlider("#parking-price-slider", val);
                        },
                        hotel: function(val) {
                            toggleSlider("#hotel-price-slider", val), toggleMultiselect("#hotel-preference", val);
                        }
                    };
                    categories[category](val);
                }, scope.foodPreferenceClick = function(event, ui) {
                    if ("undefined" == typeof scope.me.rsvp.restaurant.preference && (scope.me.rsvp.restaurant.preference = []), 
                    ui.checked) scope.me.rsvp.restaurant.preference.push(ui.value); else {
                        for (var n = [], i = 0; i < scope.me.rsvp.restaurant.preference.length; i++) {
                            var p = scope.me.rsvp.restaurant.preference[i];
                            p !== ui.value && n.push(p);
                        }
                        scope.me.rsvp.restaurant.preference = n;
                    }
                    submitVote();
                }, scope.hotelPreferenceClick = function(event, ui) {
                    if ("undefined" == typeof scope.me.rsvp.hotel.preference && (scope.me.rsvp.hotel.preference = []), 
                    ui.checked) scope.me.rsvp.hotel.preference.push(ui.value); else {
                        for (var n = [], i = 0; i < scope.me.rsvp.hotel.preference.length; i++) {
                            var p = scope.me.rsvp.hotel.preference[i];
                            p !== ui.value && n.push(p);
                        }
                        scope.me.rsvp.hotel.preference = n;
                    }
                    submitVote();
                }, scope.ticketsPriceSlide = function(event, ui) {
                    scope.me.rsvp.tickets.price = ui.value, ui.value > 0 && (scope.me.rsvp.tickets.priceGroup.low = !0), 
                    ui.value > 100 && (scope.me.rsvp.tickets.priceGroup.med = !0), ui.value > 300 && (scope.me.rsvp.tickets.priceGroup.high = !0), 
                    ui.value <= 100 && (scope.me.rsvp.tickets.priceGroup.med = !1), ui.value <= 300 && (scope.me.rsvp.tickets.priceGroup.high = !1);
                }, scope.ticketsPriceStop = function() {
                    submitVote();
                }, scope.parkingPriceSlide = function(event, ui) {
                    scope.me.rsvp.parking.price = ui.value, ui.value > 0 && (scope.me.rsvp.parking.priceGroup.low = !0), 
                    ui.value > 25 && (scope.me.rsvp.parking.priceGroup.med = !0), ui.value > 50 && (scope.me.rsvp.parking.priceGroup.high = !0), 
                    ui.value <= 25 && (scope.me.rsvp.parking.priceGroup.med = !1), ui.value <= 50 && (scope.me.rsvp.parking.priceGroup.high = !1);
                }, scope.parkingPriceStop = function() {
                    submitVote();
                }, scope.restaurantPriceSlide = function(event, ui) {
                    scope.me.rsvp.restaurant.price = ui.value, ui.value > 0 && (scope.me.rsvp.restaurant.priceGroup.low = !0), 
                    ui.value > 25 && (scope.me.rsvp.restaurant.priceGroup.med = !0), ui.value > 50 && (scope.me.rsvp.restaurant.priceGroup.high = !0), 
                    ui.value <= 25 && (scope.me.rsvp.restaurant.priceGroup.med = !1), ui.value <= 50 && (scope.me.rsvp.restaurant.priceGroup.high = !1);
                }, scope.restaurantPriceStop = function() {
                    submitVote();
                }, scope.hotelPriceSlide = function(event, ui) {
                    scope.me.rsvp.hotel.price = ui.value, ui.value > 0 && (scope.me.rsvp.hotel.priceGroup.low = !0), 
                    ui.value > 100 && (scope.me.rsvp.hotel.priceGroup.med = !0), ui.value > 300 && (scope.me.rsvp.hotel.priceGroup.high = !0), 
                    ui.value <= 100 && (scope.me.rsvp.hotel.priceGroup.med = !1), ui.value <= 300 && (scope.me.rsvp.hotel.priceGroup.high = !1);
                }, scope.hotelPriceStop = function() {
                    submitVote();
                };
                var watchMe = function() {
                    scope.toggleInputs("parking", scope.me.rsvp.parking.decision), scope.toggleInputs("restaurant", scope.me.rsvp.restaurant.decision), 
                    scope.toggleInputs("hotel", scope.me.rsvp.hotel.decision);
                };
                if (scope.me) watchMe(); else var d = scope.$watch("me", function(newVal) {
                    "undefined" != typeof newVal && (watchMe(), d());
                });
            };
        }
    };
} ]).directive("friendInviteesSection", [ "planNav", "wembliRpc", function(planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/invitees-section/friend",
        compile: function() {
            return function() {
                planNav.registerSection();
            };
        }
    };
} ]).directive("friendPonyUpSection", [ "$rootScope", "wembliRpc", "planNav", function($rootScope, wembliRpc, planNav) {
    return {
        restrict: "E",
        cache: !1,
        replace: !0,
        scope: !1,
        templateUrl: "/partials/plan/pony-up-section/friend",
        controller: [ "$scope", "$element", "$attrs", "$transclude", function($scope) {
            function handlePonyUp(newValue) {
                if ("undefined" != typeof newValue) {
                    for (var requested = 0, received = 0, i = 0; i < newValue.payment.length; i++) {
                        var p = newValue.payment[i];
                        $scope.ponyUp = {
                            expirationDateMonth: "01",
                            expirationDateYear: "2014",
                            amount: 0,
                            amountFormatted: 0,
                            transactionFee: 0,
                            total: 0
                        }, "request" === p.type && p.open && (console.log("pony up request is open"), console.log(p), 
                        $scope.ponyUpRequest = p, $scope.ponyUp && $scope.ponyUp.amount || ($scope.ponyUp.amount = parseInt(p.amount) || 0, 
                        $scope.ponyUp.amountFormatted = parseFloat($scope.ponyUp.amount / 100).toFixed(2), 
                        $scope.ponyUp.transactionFee = .029 * $scope.ponyUp.amount + 250, $scope.ponyUp.total = $scope.ponyUp.transactionFee + $scope.ponyUp.amount, 
                        $scope.ponyUp.cardHolderName = $scope.customer.firstName + " " + $scope.customer.lastName, 
                        $scope.ponyUp.organizerFirstName = $scope.organizer.firstName), console.log($scope.ponyUp)), 
                        "request" == p.type ? "canceled" !== p.status && (requested += parseInt(p.amount), 
                        p.amount = parseInt(p.amount)) : received += parseInt(p.amount);
                    }
                    newValue.payment.requested = parseFloat(requested), newValue.payment.received = parseFloat(received), 
                    newValue.payment.balance = parseFloat(requested - received);
                }
            }
            $scope.$watch("ponyUp.amountFormatted", function(newVal) {
                if ("undefined" != typeof newVal) {
                    var amount = parseInt(100 * parseFloat(newVal));
                    $scope.ponyUp.transactionFee = .029 * parseFloat(amount) + 250, $scope.ponyUp.total = $scope.ponyUp.transactionFee + amount;
                }
            }), handlePonyUp($scope.me), $rootScope.$on("pony-up-success", function(e, friend) {
                $scope.me = friend, $scope.paymentTotals();
            }), $scope.$watch("me", function(newValue) {
                handlePonyUp(newValue);
            }), $scope.showPonyUpModal = function() {
                $("#pony-up-modal").modal("show"), $rootScope.$broadcast("pony-up-clicked", $scope.ponyUp);
            };
        } ],
        compile: function() {
            return function() {
                planNav.registerSection();
            };
        }
    };
} ]).directive("ponyUpModal", [ "$rootScope", "wembliRpc", "plan", function($rootScope, wembliRpc) {
    return {
        restrict: "C",
        cache: !1,
        scope: !1,
        compile: function() {
            return function(scope) {
                $rootScope.$on("pony-up-clicked", function(e, ponyUp) {
                    scope.ponyUp = ponyUp;
                }), scope.sendPonyUp = function() {
                    if (!scope.sendPonyUpInProgress) {
                        scope.sendPonyUpInProgress = !0, scope.error = scope.formError = scope.success = !1;
                        var args = {};
                        args.total = scope.ponyUp.total, args.amount = parseInt(100 * parseFloat(scope.ponyUp.amountFormatted)), 
                        args.transactionFee = parseInt(scope.ponyUp.transactionFee), args.cardHolderName = scope.ponyUp.cardHolderName, 
                        args.creditCardNumber = scope.ponyUp.creditCardNumber, args.expirationDateMonth = scope.ponyUp.expirationDateMonth, 
                        args.expirationDateYear = scope.ponyUp.expirationDateYear, args.cvv = scope.ponyUp.cvv, 
                        args.postalCode = scope.ponyUp.postalCode, wembliRpc.fetch("plan.sendPonyUp", args, function(err, result) {
                            return scope.sendPonyUpInProgress = !1, err ? (scope.error = !0, scope.errorMessage = err, 
                            void (scope.success = !1)) : result.success ? (scope.success = !0, void $rootScope.$broadcast("pony-up-success", result.friend)) : (scope.error = !0, 
                            scope.success = !1, void (scope.errorMessage = result.error));
                        });
                    }
                };
            };
        }
    };
} ]).directive("jquerySlider", [ function() {
    return {
        restrict: "C",
        compile: function() {
            return function(scope, element, attr) {
                attr.$observe("value", function(val) {
                    var slideFn = scope.$eval(attr.slide), stopFn = scope.$eval(attr.stop), range = attr.range;
                    "true" === attr.range && (range = !0), "false" === attr.range && (range = !1);
                    var sliderArgs = {
                        range: range,
                        min: parseInt(attr.min),
                        max: parseInt(attr.max),
                        step: parseFloat(attr.step),
                        create: function() {
                            "undefined" != typeof attr.enable && scope.$watch(attr.enable, function(newVal) {
                                "undefined" != typeof newVal && element.slider(newVal ? "enable" : "disable");
                            });
                        },
                        slide: function(event, ui) {
                            scope.$apply(function() {
                                slideFn.call(slideFn, event, ui, scope, element, attr);
                            });
                        },
                        stop: function(event, ui) {
                            scope.$apply(function() {
                                stopFn.call(stopFn, event, ui, scope, element, attr);
                            });
                        }
                    };
                    "undefined" != typeof attr.value && (sliderArgs.value = parseInt(val)), "undefined" != typeof attr.values && (sliderArgs.values = scope.$eval(attr.values)), 
                    element.slider(sliderArgs);
                });
            };
        }
    };
} ]).directive("planFeed", [ "plan", "$timeout", "wembliRpc", function(plan) {
    return {
        restrict: "E",
        replace: !0,
        cache: !1,
        templateUrl: "/partials/plan/feed",
        compile: function() {
            return function(scope) {
                plan.get(function() {
                    scope.feed = plan.getFeed();
                });
            };
        }
    };
} ]).directive("planChatter", [ "$timeout", "wembliRpc", "planNav", function($timeout, wembliRpc, planNav) {
    return {
        restrict: "E",
        replace: !0,
        templateUrl: "/partials/plan/chatter",
        controller: function($scope) {
            $scope.createChatter = function() {
                $scope.chatter.$valid && ($scope.createChatterInProgress = !0, wembliRpc.fetch("chatter.create", {
                    body: $scope.chatter.body
                }, function(err, results) {
                    $scope.chatters = results.chatters, $scope.createChatterInProgress = !1;
                }));
            };
        },
        compile: function() {
            return function(scope) {
                scope.chatterLoading = !0, wembliRpc.fetch("chatter.get", {}, function(err, results) {
                    scope.chatters = results.chatters, scope.chatterLoading = !1, $timeout(function() {
                        console.log("organize chatter loaded"), planNav.registerSection();
                    }, 500);
                });
            };
        }
    };
} ]).directive("chatter", [ "wembliRpc", function(wembliRpc) {
    return {
        restrict: "C",
        controller: function($scope) {
            $scope.upVoteChatter = function() {}, $scope.toggleNewChatterComment = function() {
                $scope.newChatterComment = $scope.newChatterComment ? !1 : !0;
            }, $scope.createChatterComment = function() {
                if ($scope.comment.$valid) {
                    $scope.createChatterCommentInProgress = !0;
                    var args = {
                        body: $scope.comment.body,
                        chatterId: $scope.chatter._id
                    };
                    wembliRpc.fetch("chatter.addComment", args, function(err, results) {
                        $scope.chatter.comments = results.comments, $scope.createChatterCommentInProgress = !1;
                    });
                }
            };
        },
        compile: function() {
            return function() {};
        }
    };
} ]).directive("newChatterComment", [ "wembliRpc", "$timeout", function(wembliRpc) {
    return {
        restrict: "C",
        controller: function($scope) {
            $scope.createChatterComment = function() {
                if ($scope.comment.$valid) {
                    $scope.createChatterCommentInProgress = !0;
                    var args = {
                        body: $scope.comment.body,
                        chatterId: $scope.chatter._id
                    };
                    wembliRpc.fetch("chatter.addComment", args, function(err, results) {
                        $scope.chatter.comments = results.comments, $scope.createChatterCommentInProgress = !1;
                    });
                }
            };
        },
        compile: function() {
            return function(scope, element) {
                scope.$watch("newChatterComment", function(val) {
                    val && element.slideDown(500), val === !1 && element.slideUp(500);
                });
            };
        }
    };
} ]), angular.module("wembliApp.filters.plan", []).filter("chatterDateString", [ "$filter", function($filter) {
    return function(date) {
        return createdAgoString(date, $filter);
    };
} ]).filter("historyStatus", [ function() {
    return function(historyStatus) {
        if ("undefined" == typeof historyStatus) return "logged";
        var historyStatusFilter = {
            queued: "Sending Email",
            delivered: "Email Sent",
            opened: "Email Opened",
            responded: "Payment Posted",
            received: "Payment Received"
        };
        return "undefined" != typeof historyStatusFilter[historyStatus] ? historyStatusFilter[historyStatus] : historyStatus;
    };
} ]), angular.module("wembliApp.filters.invitation-wizard", []).filter("filterInvitees", [ "plan", function(plan) {
    return function(friends) {
        if ("undefined" == typeof friends) return friends;
        if ("organizer" === plan.getContext()) return friends;
        var newList = [], p = plan.get();
        if ("private" === p.preferences.guestList) return newList;
        for (var i = 0; i < friends.length; i++) {
            var f = friends[i];
            "rsvp" === p.preferences.guestList && null !== f.rsvp.decision && newList.push(f), 
            "full" === p.preferences.guestList && newList.push(f);
        }
        return newList;
    };
} ]), angular.module("wembliApp.services.plan", []).factory("planNav", [ "$timeout", "$rootScope", "$location", "header", "notifications", function($timeout, $rootScope, $location, header, notifications) {
    var self = this;
    self.activateSection = 1, self.arrowTop = 111, self.arrowHeight = 109, self.navFactor = {
        rsvp: 1,
        cart: 2,
        "pony-up": 3,
        itinerary: 4,
        chatter: 5
    };
    var planNav = {
        onActivate: function(f) {
            self.onActivate = f;
        },
        setActivateSection: function(sectionName) {
            self.activateSection = sectionName, this.activate();
        },
        activate: function(sectionName) {
            self.activateSection = sectionName ? sectionName : self.activateSection, $(".plan-section").removeClass("hide").hide(), 
            $(".plan-section-nav").removeClass("active"), $("#nav-section-" + self.activateSection).addClass("active");
            var top = self.arrowTop + self.arrowHeight * self.navFactor[self.activateSection];
            $(".nav-arrow").css("top", top + "px").removeClass("hide").show(), $("#section-" + self.activateSection).fadeIn(500), 
            notifications.update(), header.fixed(), self.onActivate && self.onActivate();
        }
    };
    return planNav;
} ]).factory("notifications", [ "$timeout", "plan", function($timeout, plan) {
    var keyMapping = {
        rsvpComplete: {
            id: "#rsvp-complete-notification",
            nav: "notification-nav-section-rsvp"
        },
        notConfirmed: {
            id: "#not-confirmed-notification",
            nav: "notification-nav-section-rsvp"
        },
        ticketCountMismatch: {
            id: "#ticket-count-mismatch-notification",
            nav: "notification-nav-section-cart"
        }
    }, reverseKeyMapping = {
        "rsvp-complete-notification": "rsvpComplete",
        "not-confirmed-notification": "notConfirmed",
        "ticket-count-mismatch-notification": "ticketCountMismatch"
    };
    return {
        findInPlan: function(id, notifications) {
            var ret = null;
            return angular.forEach(notifications, function(n) {
                reverseKeyMapping[id] == n.key && (ret = n);
            }), ret ? ret : void 0;
        },
        update: function() {
            var self = this;
            $timeout(function() {
                var counts = {};
                plan.get(function(p) {
                    angular.forEach(p.notifications, function(n) {
                        if (!n.acknowledged) {
                            var mapping = keyMapping[n.key];
                            counts[mapping.nav] = "undefined" != typeof counts[mapping.nav] ? counts[mapping.nav]++ : 1;
                        }
                    }), $("section .notification").each(function(idx, el) {
                        var n = (keyMapping[reverseKeyMapping[el.id]], self.findInPlan(el.id, p.notifications));
                        "undefined" == typeof n || n.acknowledged ? $(el).hide() : $(el).show();
                    }), $("#plan-nav a .notification").each(function(idx, n) {
                        counts[n.id] ? $(n).html(counts[n.id]).show() : $(n).html("0").hide();
                    });
                });
            }, 500);
        }
    };
} ]).factory("cart", [ "plan", function(plan) {
    var self = this;
    return self.tickets = {
        fee: .15,
        deliveryFee: 15,
        label: "Ticket Group "
    }, self.parking = {
        fee: 0,
        deliveryFee: 0,
        label: "Parking Spot "
    }, self.restaurants = {
        fee: 0,
        deliveryFee: 0,
        label: "Restaurant Deal "
    }, self.hotels = {
        fee: 0,
        deliveryFee: 0,
        label: "Hotel Room "
    }, {
        totals: function(key) {
            plan.get(function(p) {
                var methods = {
                    tickets: {
                        get: function() {
                            return plan.getTickets();
                        },
                        getConfig: function() {
                            return self.tickets;
                        },
                        getAmount: function(item) {
                            return item.purchased ? item.payment.qty ? item.payment.amount / item.payment.qty : 0 : item.ticketGroup.ActualPrice || 0;
                        },
                        getQty: function(item) {
                            return item.purchased ? item.payment.qty : item.ticketGroup.selectedQty;
                        },
                        totalEach: function(price, fee, qty, splitBy) {
                            return (price + fee) * qty / splitBy;
                        }
                    },
                    parking: {
                        get: function() {
                            return plan.getParking();
                        },
                        getConfig: function() {
                            return self.parking;
                        },
                        getAmount: function(item) {
                            return item.purchased ? item.payment.qty ? item.payment.amount / item.payment.qty : 0 : "pw" === item.service ? item.parking.price || 0 : void 0;
                        },
                        getQty: function(item) {
                            return item.purchased ? item.payment.qty : "pw" === item.service ? item.parking.reservation : void 0;
                        },
                        totalEach: function(price, fee, qty, splitBy) {
                            return (price * qty + fee) / splitBy;
                        }
                    },
                    restaurants: {
                        get: function() {
                            return plan.getRestaurants();
                        },
                        getConfig: function() {
                            return self.restaurants;
                        },
                        getAmount: function(item) {
                            return item.purchased ? item.payment.qty ? item.payment.amount / item.payment.qty : 0 : "yipit" === item.service ? item.restaurant.price.raw || 0 : void 0;
                        },
                        totalEach: function(price, fee, qty, splitBy) {
                            return (price * qty + fee) / splitBy;
                        },
                        getQty: function(item) {
                            return item.purchased ? item.payment.qty : "yipit" === item.service ? 1 : void 0;
                        }
                    },
                    hotels: {
                        get: function() {
                            return plan.getHotels();
                        },
                        getConfig: function() {
                            return self.hotels;
                        },
                        getAmount: function() {
                            return 0;
                        },
                        getQty: function() {
                            return 0;
                        },
                        totalEach: function(price, fee, qty, splitBy) {
                            return (price * qty + fee) / splitBy;
                        }
                    }
                }, funcs = methods[key], config = funcs.getConfig(), items = funcs.get(), groupTotal = 0, groupCount = 0, groups = [], groupTotalEach = {}, fee = config.fee || 0, deliveryFee = config.deliveryFee || 0, splitBy = 0, deliverySplitBy = 0;
                p.organizer.rsvp.decision && (splitBy += parseInt(p.organizer.rsvp.guestCount), 
                deliverySplitBy++);
                for (var friends = plan.getFriends(), i = 0; i < friends.length; i++) {
                    var f = friends[i];
                    f.inviteStatus && f.rsvp.decision && (splitBy += parseInt(f.rsvp.guestCount), deliverySplitBy++);
                }
                for (var i = 0; i < items.length; i++) {
                    var item = items[i], amount = parseFloat(funcs.getAmount(item)), qty = funcs.getQty(item);
                    "undefined" == typeof qty && (qty = 0), (p.organizer.rsvp.decision && 1 == splitBy || 0 == splitBy) && (splitBy = qty, 
                    deliverySplitBy = qty);
                    var cb = {}, groupNumber = i + 1;
                    cb.price = parseFloat(amount) || 0, cb.serviceFee = cb.price * fee, cb.deliveryFee = deliveryFee, 
                    cb.deliveryFeeEach = deliverySplitBy > 0 ? cb.deliveryFee / deliverySplitBy : 0, 
                    cb.totalEach = funcs.totalEach(cb.price, cb.serviceFee, qty, splitBy), cb.total = cb.totalEach * splitBy + cb.deliveryFee, 
                    groupTotal += cb.total, groupCount += qty, groups.push({
                        value: i,
                        label: config.label + groupNumber
                    }), groupTotalEach[i] = cb.totalEach, item.costBreakdown = cb;
                }
                items.total = groupTotal, items.totalQty = groupCount, items.groups = groups, items.groupTotalEach = groupTotalEach;
            });
        }
    };
} ]), angular.module("wembliApp.services.google", []).factory("googleMap", [ "$rootScope", function($rootScope) {
    function floatEqual(f1, f2) {
        return Math.abs(f1 - f2) < 1e-6;
    }
    var self = this, centerOffset = {
        lat: -.002,
        lng: .01
    };
    self._markers = [], self._infoWindows = [], self._map = null, self.drawn = !1, self.dragging = !1, 
    self.zoom = 14, self.center = new google.maps.LatLng(32.722439302963, -117.1645658798);
    var mapDefaults = {
        center: self.center,
        zoom: self.zoom,
        draggable: !0,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    return {
        init: function() {
            self._markers = [], self._infoWindows = [], self._map = null, self.drawn = !1, self.dragging = !1, 
            self.zoom = 14, self.center = new google.maps.LatLng(32.722439302963, -117.1645658798);
        },
        draw: function(element, options, handlers) {
            var o = angular.extend(mapDefaults, options), lat = o.center.lat() + centerOffset.lat, lng = o.center.lng() + centerOffset.lng;
            o.center = new google.maps.LatLng(lat, lng), self._map = new google.maps.Map(element[0], o), 
            google.maps.event.addListener(self._map, "dragstart", function() {
                self.dragging = !0;
            }), google.maps.event.addListener(self._map, "idle", function() {
                self.dragging = !1;
            }), google.maps.event.addListener(self._map, "drag", function() {
                self.dragging = !0;
            }), google.maps.event.addListener(self._map, "zoom_changed", function() {
                self.zoom = self._map.getZoom(), self.center = self._map.getCenter();
            }), google.maps.event.addListener(self._map, "center_changed", function() {
                self.center = self._map.getCenter();
            }), "undefined" != typeof handlers && handlers.length && angular.forEach(handlers, function(h) {
                google.maps.event.addListener(self._map, h.on, h.handler);
            }), self.drawn = !0, $rootScope.$broadcast("google-map-drawn");
        },
        isDrawn: function(val) {
            return "undefined" != typeof val && (self.drawn = val), self.drawn;
        },
        getMap: function() {
            return self._map;
        },
        addMarker: function(marker) {
            return self._markers.unshift(marker), marker;
        },
        findMarker: function(lat, lng) {
            for (var i = 0; i < self._markers.length; i++) {
                var pos = self._markers[i].getPosition();
                if (floatEqual(pos.lat(), lat) && floatEqual(pos.lng(), lng)) return self._markers[i];
            }
            return null;
        },
        hasMarker: function(lat, lng) {
            return null !== this.findMarker(lat, lng);
        },
        removeMarker: function() {},
        addInfoWindow: function(infoWindow, marker) {
            var win = {
                infoWindow: infoWindow,
                open: !1
            };
            if ("undefined" != typeof infoWindow && "undefined" != typeof marker && "undefined" != typeof infoWindow.getPosition() && "undefined" != typeof marker.getPosition()) return "undefined" != typeof marker && "undefined" != typeof marker.getPosition() ? (win.lat = marker.getPosition().lat(), 
            win.lng = marker.getPosition().lng()) : (win.lat = infoWindow.getPosition().lat(), 
            win.lng = infoWindow.getPosition().lng()), self._infoWindows.unshift(win), win;
        },
        _findInfoWindow: function(lat, lng) {
            for (var i = 0; i < self._infoWindows.length; i++) {
                var winLat = self._infoWindows[i].lat, winLng = self._infoWindows[i].lng;
                if (floatEqual(winLat, lat) && floatEqual(winLng, lng)) return self._infoWindows[i];
            }
            return null;
        },
        findInfoWindow: function(lat, lng) {
            var win = this._findInfoWindow(lat, lng);
            return win ? win.infoWindow : null;
        },
        isInfoWindowOpen: function(marker) {
            var lat = marker.getPosition().lat(), lng = marker.getPosition().lng(), win = this._findInfoWindow(lat, lng);
            return win ? win.open : !1;
        },
        closeInfoWindow: function(marker) {
            var lat = marker.getPosition().lat(), lng = marker.getPosition().lng(), win = this._findInfoWindow(lat, lng);
            win.open = !1, win.infoWindow.close();
        },
        openInfoWindow: function(marker) {
            var lat = marker.getPosition().lat(), lng = marker.getPosition().lng(), win = this._findInfoWindow(lat, lng);
            win && (win.open = !0, win.infoWindow.open(self._map, marker));
        },
        resize: function() {
            google.maps.event.trigger(self._map, "resize"), $rootScope.$broadcast("google-map-resize");
        }
    };
} ]).factory("googlePlaces", [ "googleMap", function(googleMap) {
    return {
        getParking: function(lat, lng, radius, callback) {
            var request = {
                location: new google.maps.LatLng(lat, lng),
                radius: radius,
                types: [ "parking" ]
            }, service = new google.maps.places.PlacesService(googleMap.getMap());
            service.nearbySearch(request, callback);
        },
        getRestaurants: function(lat, lng, radius, callback) {
            var request = {
                location: new google.maps.LatLng(lat, lng),
                radius: radius,
                types: [ "restaurant" ]
            }, service = new google.maps.places.PlacesService(googleMap.getMap());
            service.nearbySearch(request, callback);
        },
        getHotels: function(lat, lng, radius, callback) {
            var request = {
                location: new google.maps.LatLng(lat, lng),
                radius: radius,
                types: [ "lodging" ]
            }, service = new google.maps.places.PlacesService(googleMap.getMap());
            service.nearbySearch(request, callback);
        },
        getDetails: function(reference, callback) {
            var request = {
                reference: reference
            }, service = new google.maps.places.PlacesService(googleMap.getMap());
            service.getDetails(request, callback);
        }
    };
} ]).factory("mapMarker", [ "mapInfoWindowContent", function(mapInfoWindowContent) {
    return {
        create: function(googleMap, args) {
            var position, markerArgs = {
                map: googleMap.getMap()
            };
            "undefined" != typeof args.position && (position = args.position), "undefined" != typeof args.lat && "undefined" != typeof args.lng && (position = new google.maps.LatLng(args.lat, args.lng)), 
            markerArgs.position = position;
            var marker = new google.maps.Marker(markerArgs);
            marker.setIcon(args.icon), marker.setAnimation(google.maps.Animation.DROP);
            var win = new google.maps.InfoWindow({
                position: position,
                content: mapInfoWindowContent.create({
                    header: args.name,
                    body: args.body
                }),
                pixelOffset: new google.maps.Size(10, 0)
            });
            google.maps.event.addListener(marker, "click", function() {
                googleMap.isInfoWindowOpen(marker) ? googleMap.closeInfoWindow(marker) : googleMap.openInfoWindow(marker);
            }), "undefined" != typeof args.click && google.maps.event.addListener(marker, "click", function() {
                googleMap.isInfoWindowOpen(marker) ? args.click.on() : args.click.off();
            }), googleMap.addMarker(marker), googleMap.addInfoWindow(win, marker);
        }
    };
} ]).factory("mapVenue", [ "mapInfoWindowContent", function(mapInfoWindowContent) {
    return {
        create: function(googleMap, args) {
            var position;
            "undefined" != typeof args.position && (position = args.position), "undefined" != typeof args.lat && "undefined" != typeof args.lng && (position = new google.maps.LatLng(args.lat, args.lng));
            var marker = new google.maps.Marker({
                map: googleMap.getMap(),
                position: position
            });
            marker.setIcon("/images/icons/map-icons/sports/stadium.png"), marker.setAnimation(google.maps.Animation.DROP);
            var win = new google.maps.InfoWindow({
                position: position,
                content: mapInfoWindowContent.create({
                    header: args.name,
                    body: args.street + ", " + args.city + ", " + args.state
                }),
                pixelOffset: new google.maps.Size(10, 0)
            });
            google.maps.event.addListener(marker, "click", function() {
                googleMap.isInfoWindowOpen(marker) ? googleMap.closeInfoWindow(marker) : googleMap.openInfoWindow(marker);
            }), googleMap.addMarker(marker), googleMap.addInfoWindow(win, marker), googleMap.openInfoWindow(marker);
        }
    };
} ]).factory("mapInfoWindowContent", [ function() {
    return {
        create: function(args) {
            var html = '<div class="info-window">';
            return html += '<h3 class="info-window-header">' + args.header + "</h3>", html += '<div class="info-window-body">' + args.body + "</div>", 
            html += "</div>";
        }
    };
} ]);